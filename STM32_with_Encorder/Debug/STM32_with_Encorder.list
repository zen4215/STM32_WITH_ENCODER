
STM32_with_Encorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d80  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003f10  08003f10  00004f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f84  08003f84  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003f84  08003f84  00004f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f8c  08003f8c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f8c  08003f8c  00004f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f90  08003f90  00004f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003f94  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          00000244  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ac  200002ac  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6fa  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ad9  00000000  00000000  00012792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  00014270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000099e  00000000  00000000  00014eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c089  00000000  00000000  00015856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea1b  00000000  00000000  000318df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6619  00000000  00000000  000402fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e6913  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b9c  00000000  00000000  000e6958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  000ea4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ef8 	.word	0x08003ef8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003ef8 	.word	0x08003ef8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 8000276:	4b1c      	ldr	r3, [pc, #112]	@ (80002e8 <main+0x78>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f002 ff1c 	bl	80030bc <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 face 	bl	8000824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f834 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f8f2 	bl	8000474 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000290:	f000 f86c 	bl	800036c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000294:	f000 f8be 	bl	8000414 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  const int CP = 4294967295;
 8000298:	f04f 33ff 	mov.w	r3, #4294967295
 800029c:	607b      	str	r3, [r7, #4]
  int count;
  __HAL_TIM_SET_COUNTER(&htim2, CP/2);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	0fda      	lsrs	r2, r3, #31
 80002a2:	4413      	add	r3, r2
 80002a4:	105b      	asrs	r3, r3, #1
 80002a6:	461a      	mov	r2, r3
 80002a8:	4b10      	ldr	r3, [pc, #64]	@ (80002ec <main+0x7c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 80002ae:	2100      	movs	r1, #0
 80002b0:	480e      	ldr	r0, [pc, #56]	@ (80002ec <main+0x7c>)
 80002b2:	f002 f85f 	bl	8002374 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 80002b6:	2104      	movs	r1, #4
 80002b8:	480c      	ldr	r0, [pc, #48]	@ (80002ec <main+0x7c>)
 80002ba:	f002 f85b 	bl	8002374 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	count = TIM2->CNT;
 80002be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002c4:	603b      	str	r3, [r7, #0]
	printf("%d\r\n",count - CP / 2);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	0fda      	lsrs	r2, r3, #31
 80002ca:	4413      	add	r3, r2
 80002cc:	105b      	asrs	r3, r3, #1
 80002ce:	425b      	negs	r3, r3
 80002d0:	461a      	mov	r2, r3
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	4413      	add	r3, r2
 80002d6:	4619      	mov	r1, r3
 80002d8:	4805      	ldr	r0, [pc, #20]	@ (80002f0 <main+0x80>)
 80002da:	f002 fedd 	bl	8003098 <iprintf>
	HAL_Delay(50);
 80002de:	2032      	movs	r0, #50	@ 0x32
 80002e0:	f000 fb06 	bl	80008f0 <HAL_Delay>
	count = TIM2->CNT;
 80002e4:	bf00      	nop
 80002e6:	e7ea      	b.n	80002be <main+0x4e>
 80002e8:	20000018 	.word	0x20000018
 80002ec:	20000084 	.word	0x20000084
 80002f0:	08003f10 	.word	0x08003f10

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b090      	sub	sp, #64	@ 0x40
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0318 	add.w	r3, r7, #24
 80002fe:	2228      	movs	r2, #40	@ 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f002 ffd9 	bl	80032ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000316:	2302      	movs	r3, #2
 8000318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031e:	2310      	movs	r3, #16
 8000320:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000322:	2300      	movs	r3, #0
 8000324:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	f107 0318 	add.w	r3, r7, #24
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fd5c 	bl	8000de8 <HAL_RCC_OscConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000336:	f000 f8d5 	bl	80004e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	230f      	movs	r3, #15
 800033c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800033e:	2300      	movs	r3, #0
 8000340:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f001 fd56 	bl	8001e04 <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800035e:	f000 f8c1 	bl	80004e4 <Error_Handler>
  }
}
 8000362:	bf00      	nop
 8000364:	3740      	adds	r7, #64	@ 0x40
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08c      	sub	sp, #48	@ 0x30
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000372:	f107 030c 	add.w	r3, r7, #12
 8000376:	2224      	movs	r2, #36	@ 0x24
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f002 ff9d 	bl	80032ba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000380:	463b      	mov	r3, r7
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800038a:	4b21      	ldr	r3, [pc, #132]	@ (8000410 <MX_TIM2_Init+0xa4>)
 800038c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000390:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000392:	4b1f      	ldr	r3, [pc, #124]	@ (8000410 <MX_TIM2_Init+0xa4>)
 8000394:	2200      	movs	r2, #0
 8000396:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000398:	4b1d      	ldr	r3, [pc, #116]	@ (8000410 <MX_TIM2_Init+0xa4>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800039e:	4b1c      	ldr	r3, [pc, #112]	@ (8000410 <MX_TIM2_Init+0xa4>)
 80003a0:	f04f 32ff 	mov.w	r2, #4294967295
 80003a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000410 <MX_TIM2_Init+0xa4>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ac:	4b18      	ldr	r3, [pc, #96]	@ (8000410 <MX_TIM2_Init+0xa4>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80003b2:	2301      	movs	r3, #1
 80003b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003ba:	2301      	movs	r3, #1
 80003bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003c6:	2300      	movs	r3, #0
 80003c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003ca:	2301      	movs	r3, #1
 80003cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80003d6:	f107 030c 	add.w	r3, r7, #12
 80003da:	4619      	mov	r1, r3
 80003dc:	480c      	ldr	r0, [pc, #48]	@ (8000410 <MX_TIM2_Init+0xa4>)
 80003de:	f001 ff23 	bl	8002228 <HAL_TIM_Encoder_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80003e8:	f000 f87c 	bl	80004e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ec:	2300      	movs	r3, #0
 80003ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f4:	463b      	mov	r3, r7
 80003f6:	4619      	mov	r1, r3
 80003f8:	4805      	ldr	r0, [pc, #20]	@ (8000410 <MX_TIM2_Init+0xa4>)
 80003fa:	f002 f8f3 	bl	80025e4 <HAL_TIMEx_MasterConfigSynchronization>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000404:	f000 f86e 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000408:	bf00      	nop
 800040a:	3730      	adds	r7, #48	@ 0x30
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000084 	.word	0x20000084

08000414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000418:	4b14      	ldr	r3, [pc, #80]	@ (800046c <MX_USART2_UART_Init+0x58>)
 800041a:	4a15      	ldr	r2, [pc, #84]	@ (8000470 <MX_USART2_UART_Init+0x5c>)
 800041c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800041e:	4b13      	ldr	r3, [pc, #76]	@ (800046c <MX_USART2_UART_Init+0x58>)
 8000420:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000426:	4b11      	ldr	r3, [pc, #68]	@ (800046c <MX_USART2_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800042c:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <MX_USART2_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000432:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <MX_USART2_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000438:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <MX_USART2_UART_Init+0x58>)
 800043a:	220c      	movs	r2, #12
 800043c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <MX_USART2_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000444:	4b09      	ldr	r3, [pc, #36]	@ (800046c <MX_USART2_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800044a:	4b08      	ldr	r3, [pc, #32]	@ (800046c <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000450:	4b06      	ldr	r3, [pc, #24]	@ (800046c <MX_USART2_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000456:	4805      	ldr	r0, [pc, #20]	@ (800046c <MX_USART2_UART_Init+0x58>)
 8000458:	f002 f932 	bl	80026c0 <HAL_UART_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000462:	f000 f83f 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	200000d0 	.word	0x200000d0
 8000470:	40004400 	.word	0x40004400

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <MX_GPIO_Init+0x44>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a0e      	ldr	r2, [pc, #56]	@ (80004b8 <MX_GPIO_Init+0x44>)
 8000480:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b0c      	ldr	r3, [pc, #48]	@ (80004b8 <MX_GPIO_Init+0x44>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000492:	4b09      	ldr	r3, [pc, #36]	@ (80004b8 <MX_GPIO_Init+0x44>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a08      	ldr	r2, [pc, #32]	@ (80004b8 <MX_GPIO_Init+0x44>)
 8000498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <MX_GPIO_Init+0x44>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000

080004bc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	b29a      	uxth	r2, r3
 80004cc:	230a      	movs	r3, #10
 80004ce:	68b9      	ldr	r1, [r7, #8]
 80004d0:	4803      	ldr	r0, [pc, #12]	@ (80004e0 <_write+0x24>)
 80004d2:	f002 f943 	bl	800275c <HAL_UART_Transmit>
  return len;
 80004d6:	687b      	ldr	r3, [r7, #4]
}
 80004d8:	4618      	mov	r0, r3
 80004da:	3710      	adds	r7, #16
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	200000d0 	.word	0x200000d0

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <Error_Handler+0x8>

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <HAL_MspInit+0x44>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000534 <HAL_MspInit+0x44>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <HAL_MspInit+0x44>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <HAL_MspInit+0x44>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a08      	ldr	r2, [pc, #32]	@ (8000534 <HAL_MspInit+0x44>)
 8000514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000518:	61d3      	str	r3, [r2, #28]
 800051a:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <HAL_MspInit+0x44>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000

08000538 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08a      	sub	sp, #40	@ 0x28
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000558:	d128      	bne.n	80005ac <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800055a:	4b16      	ldr	r3, [pc, #88]	@ (80005b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a15      	ldr	r2, [pc, #84]	@ (80005b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b13      	ldr	r3, [pc, #76]	@ (80005b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b10      	ldr	r3, [pc, #64]	@ (80005b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a0f      	ldr	r2, [pc, #60]	@ (80005b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800058a:	2303      	movs	r3, #3
 800058c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058e:	2302      	movs	r3, #2
 8000590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800059a:	2301      	movs	r3, #1
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a8:	f000 faac 	bl	8000b04 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80005ac:	bf00      	nop
 80005ae:	3728      	adds	r7, #40	@ 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000

080005b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	@ 0x28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a18      	ldr	r2, [pc, #96]	@ (8000638 <HAL_UART_MspInit+0x80>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d129      	bne.n	800062e <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005da:	4b18      	ldr	r3, [pc, #96]	@ (800063c <HAL_UART_MspInit+0x84>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a17      	ldr	r2, [pc, #92]	@ (800063c <HAL_UART_MspInit+0x84>)
 80005e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	4b15      	ldr	r3, [pc, #84]	@ (800063c <HAL_UART_MspInit+0x84>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b12      	ldr	r3, [pc, #72]	@ (800063c <HAL_UART_MspInit+0x84>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a11      	ldr	r2, [pc, #68]	@ (800063c <HAL_UART_MspInit+0x84>)
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <HAL_UART_MspInit+0x84>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800060a:	f248 0304 	movw	r3, #32772	@ 0x8004
 800060e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000610:	2302      	movs	r3, #2
 8000612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000618:	2303      	movs	r3, #3
 800061a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800061c:	2307      	movs	r3, #7
 800061e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4619      	mov	r1, r3
 8000626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062a:	f000 fa6b 	bl	8000b04 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	@ 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40004400 	.word	0x40004400
 800063c:	40021000 	.word	0x40021000

08000640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <NMI_Handler+0x4>

08000648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <MemManage_Handler+0x4>

08000658 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <BusFault_Handler+0x4>

08000660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <UsageFault_Handler+0x4>

08000668 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000696:	f000 f90b 	bl	80008b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}

0800069e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b086      	sub	sp, #24
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	60f8      	str	r0, [r7, #12]
 80006a6:	60b9      	str	r1, [r7, #8]
 80006a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	e00a      	b.n	80006c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006b0:	f3af 8000 	nop.w
 80006b4:	4601      	mov	r1, r0
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	60ba      	str	r2, [r7, #8]
 80006bc:	b2ca      	uxtb	r2, r1
 80006be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	3301      	adds	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	697a      	ldr	r2, [r7, #20]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	dbf0      	blt.n	80006b0 <_read+0x12>
  }

  return len;
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000700:	605a      	str	r2, [r3, #4]
  return 0;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <_isatty>:

int _isatty(int file)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000718:	2301      	movs	r3, #1
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000726:	b480      	push	{r7}
 8000728:	b085      	sub	sp, #20
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000732:	2300      	movs	r3, #0
}
 8000734:	4618      	mov	r0, r3
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000748:	4a14      	ldr	r2, [pc, #80]	@ (800079c <_sbrk+0x5c>)
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <_sbrk+0x60>)
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000754:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <_sbrk+0x64>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d102      	bne.n	8000762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <_sbrk+0x64>)
 800075e:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <_sbrk+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <_sbrk+0x64>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	429a      	cmp	r2, r3
 800076e:	d207      	bcs.n	8000780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000770:	f002 fdf2 	bl	8003358 <__errno>
 8000774:	4603      	mov	r3, r0
 8000776:	220c      	movs	r2, #12
 8000778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	e009      	b.n	8000794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <_sbrk+0x64>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000786:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <_sbrk+0x64>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	4a05      	ldr	r2, [pc, #20]	@ (80007a4 <_sbrk+0x64>)
 8000790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000792:	68fb      	ldr	r3, [r7, #12]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20003000 	.word	0x20003000
 80007a0:	00000400 	.word	0x00000400
 80007a4:	20000158 	.word	0x20000158
 80007a8:	200002b0 	.word	0x200002b0

080007ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <SystemInit+0x20>)
 80007b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007b6:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <SystemInit+0x20>)
 80007b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000808 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d4:	f7ff ffea 	bl	80007ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d8:	480c      	ldr	r0, [pc, #48]	@ (800080c <LoopForever+0x6>)
  ldr r1, =_edata
 80007da:	490d      	ldr	r1, [pc, #52]	@ (8000810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000814 <LoopForever+0xe>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e0:	e002      	b.n	80007e8 <LoopCopyDataInit>

080007e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e6:	3304      	adds	r3, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ec:	d3f9      	bcc.n	80007e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f0:	4c0a      	ldr	r4, [pc, #40]	@ (800081c <LoopForever+0x16>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f4:	e001      	b.n	80007fa <LoopFillZerobss>

080007f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f8:	3204      	adds	r2, #4

080007fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007fc:	d3fb      	bcc.n	80007f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007fe:	f002 fdb1 	bl	8003364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000802:	f7ff fd35 	bl	8000270 <main>

08000806 <LoopForever>:

LoopForever:
    b LoopForever
 8000806:	e7fe      	b.n	8000806 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000808:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000814:	08003f94 	.word	0x08003f94
  ldr r2, =_sbss
 8000818:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800081c:	200002ac 	.word	0x200002ac

08000820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_2_IRQHandler>
	...

08000824 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <HAL_Init+0x28>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a07      	ldr	r2, [pc, #28]	@ (800084c <HAL_Init+0x28>)
 800082e:	f043 0310 	orr.w	r3, r3, #16
 8000832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000834:	2003      	movs	r0, #3
 8000836:	f000 f931 	bl	8000a9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083a:	2000      	movs	r0, #0
 800083c:	f000 f808 	bl	8000850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000840:	f7ff fe56 	bl	80004f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40022000 	.word	0x40022000

08000850 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <HAL_InitTick+0x54>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <HAL_InitTick+0x58>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000866:	fbb3 f3f1 	udiv	r3, r3, r1
 800086a:	fbb2 f3f3 	udiv	r3, r2, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f93b 	bl	8000aea <HAL_SYSTICK_Config>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e00e      	b.n	800089c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	d80a      	bhi.n	800089a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000884:	2200      	movs	r2, #0
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f000 f911 	bl	8000ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000890:	4a06      	ldr	r2, [pc, #24]	@ (80008ac <HAL_InitTick+0x5c>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000896:	2300      	movs	r3, #0
 8000898:	e000      	b.n	800089c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000004 	.word	0x20000004

080008b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_IncTick+0x20>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_IncTick+0x24>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <HAL_IncTick+0x24>)
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	20000008 	.word	0x20000008
 80008d4:	2000015c 	.word	0x2000015c

080008d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return uwTick;  
 80008dc:	4b03      	ldr	r3, [pc, #12]	@ (80008ec <HAL_GetTick+0x14>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	2000015c 	.word	0x2000015c

080008f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f8:	f7ff ffee 	bl	80008d8 <HAL_GetTick>
 80008fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000908:	d005      	beq.n	8000916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800090a:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <HAL_Delay+0x44>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4413      	add	r3, r2
 8000914:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000916:	bf00      	nop
 8000918:	f7ff ffde 	bl	80008d8 <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	429a      	cmp	r2, r3
 8000926:	d8f7      	bhi.n	8000918 <HAL_Delay+0x28>
  {
  }
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008

08000938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000954:	4013      	ands	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000960:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096a:	4a04      	ldr	r2, [pc, #16]	@ (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	60d3      	str	r3, [r2, #12]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000984:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <__NVIC_GetPriorityGrouping+0x18>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	f003 0307 	and.w	r3, r3, #7
}
 800098e:	4618      	mov	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	db0a      	blt.n	80009c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	490c      	ldr	r1, [pc, #48]	@ (80009e8 <__NVIC_SetPriority+0x4c>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	0112      	lsls	r2, r2, #4
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	440b      	add	r3, r1
 80009c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c4:	e00a      	b.n	80009dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4908      	ldr	r1, [pc, #32]	@ (80009ec <__NVIC_SetPriority+0x50>)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	3b04      	subs	r3, #4
 80009d4:	0112      	lsls	r2, r2, #4
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	440b      	add	r3, r1
 80009da:	761a      	strb	r2, [r3, #24]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000e100 	.word	0xe000e100
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b089      	sub	sp, #36	@ 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	f1c3 0307 	rsb	r3, r3, #7
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	bf28      	it	cs
 8000a0e:	2304      	movcs	r3, #4
 8000a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3304      	adds	r3, #4
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d902      	bls.n	8000a20 <NVIC_EncodePriority+0x30>
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3b03      	subs	r3, #3
 8000a1e:	e000      	b.n	8000a22 <NVIC_EncodePriority+0x32>
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	401a      	ands	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43d9      	mvns	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	4313      	orrs	r3, r2
         );
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3724      	adds	r7, #36	@ 0x24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a68:	d301      	bcc.n	8000a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00f      	b.n	8000a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <SysTick_Config+0x40>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a76:	210f      	movs	r1, #15
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f7ff ff8e 	bl	800099c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <SysTick_Config+0x40>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a86:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <SysTick_Config+0x40>)
 8000a88:	2207      	movs	r2, #7
 8000a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	e000e010 	.word	0xe000e010

08000a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff47 	bl	8000938 <__NVIC_SetPriorityGrouping>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac4:	f7ff ff5c 	bl	8000980 <__NVIC_GetPriorityGrouping>
 8000ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	6978      	ldr	r0, [r7, #20]
 8000ad0:	f7ff ff8e 	bl	80009f0 <NVIC_EncodePriority>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff5d 	bl	800099c <__NVIC_SetPriority>
}
 8000ae2:	bf00      	nop
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ffb0 	bl	8000a58 <SysTick_Config>
 8000af8:	4603      	mov	r3, r0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b087      	sub	sp, #28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b12:	e14e      	b.n	8000db2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	2101      	movs	r1, #1
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f000 8140 	beq.w	8000dac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d005      	beq.n	8000b44 <HAL_GPIO_Init+0x40>
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f003 0303 	and.w	r3, r3, #3
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d130      	bne.n	8000ba6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	2203      	movs	r2, #3
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68da      	ldr	r2, [r3, #12]
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	091b      	lsrs	r3, r3, #4
 8000b90:	f003 0201 	and.w	r2, r3, #1
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d017      	beq.n	8000be2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d123      	bne.n	8000c36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	08da      	lsrs	r2, r3, #3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3208      	adds	r2, #8
 8000bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	220f      	movs	r2, #15
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	691a      	ldr	r2, [r3, #16]
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	f003 0307 	and.w	r3, r3, #7
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	08da      	lsrs	r2, r3, #3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3208      	adds	r2, #8
 8000c30:	6939      	ldr	r1, [r7, #16]
 8000c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	2203      	movs	r2, #3
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0203 	and.w	r2, r3, #3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f000 809a 	beq.w	8000dac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c78:	4b55      	ldr	r3, [pc, #340]	@ (8000dd0 <HAL_GPIO_Init+0x2cc>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a54      	ldr	r2, [pc, #336]	@ (8000dd0 <HAL_GPIO_Init+0x2cc>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b52      	ldr	r3, [pc, #328]	@ (8000dd0 <HAL_GPIO_Init+0x2cc>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c90:	4a50      	ldr	r2, [pc, #320]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	089b      	lsrs	r3, r3, #2
 8000c96:	3302      	adds	r3, #2
 8000c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	220f      	movs	r2, #15
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000cba:	d013      	beq.n	8000ce4 <HAL_GPIO_Init+0x1e0>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a46      	ldr	r2, [pc, #280]	@ (8000dd8 <HAL_GPIO_Init+0x2d4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d00d      	beq.n	8000ce0 <HAL_GPIO_Init+0x1dc>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a45      	ldr	r2, [pc, #276]	@ (8000ddc <HAL_GPIO_Init+0x2d8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d007      	beq.n	8000cdc <HAL_GPIO_Init+0x1d8>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a44      	ldr	r2, [pc, #272]	@ (8000de0 <HAL_GPIO_Init+0x2dc>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d101      	bne.n	8000cd8 <HAL_GPIO_Init+0x1d4>
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e006      	b.n	8000ce6 <HAL_GPIO_Init+0x1e2>
 8000cd8:	2305      	movs	r3, #5
 8000cda:	e004      	b.n	8000ce6 <HAL_GPIO_Init+0x1e2>
 8000cdc:	2302      	movs	r3, #2
 8000cde:	e002      	b.n	8000ce6 <HAL_GPIO_Init+0x1e2>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e000      	b.n	8000ce6 <HAL_GPIO_Init+0x1e2>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	f002 0203 	and.w	r2, r2, #3
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	4093      	lsls	r3, r2
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cf6:	4937      	ldr	r1, [pc, #220]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d04:	4b37      	ldr	r3, [pc, #220]	@ (8000de4 <HAL_GPIO_Init+0x2e0>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d28:	4a2e      	ldr	r2, [pc, #184]	@ (8000de4 <HAL_GPIO_Init+0x2e0>)
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <HAL_GPIO_Init+0x2e0>)
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d52:	4a24      	ldr	r2, [pc, #144]	@ (8000de4 <HAL_GPIO_Init+0x2e0>)
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d58:	4b22      	ldr	r3, [pc, #136]	@ (8000de4 <HAL_GPIO_Init+0x2e0>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d7c:	4a19      	ldr	r2, [pc, #100]	@ (8000de4 <HAL_GPIO_Init+0x2e0>)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <HAL_GPIO_Init+0x2e0>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000da6:	4a0f      	ldr	r2, [pc, #60]	@ (8000de4 <HAL_GPIO_Init+0x2e0>)
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f47f aea9 	bne.w	8000b14 <HAL_GPIO_Init+0x10>
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	371c      	adds	r7, #28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010000 	.word	0x40010000
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	48000800 	.word	0x48000800
 8000de0:	48000c00 	.word	0x48000c00
 8000de4:	40010400 	.word	0x40010400

08000de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000df4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000df8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f000 bff4 	b.w	8001df6 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 816d 	beq.w	80010fe <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e24:	4bb4      	ldr	r3, [pc, #720]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 030c 	and.w	r3, r3, #12
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d00c      	beq.n	8000e4a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e30:	4bb1      	ldr	r3, [pc, #708]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 030c 	and.w	r3, r3, #12
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d157      	bne.n	8000eec <HAL_RCC_OscConfig+0x104>
 8000e3c:	4bae      	ldr	r3, [pc, #696]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e48:	d150      	bne.n	8000eec <HAL_RCC_OscConfig+0x104>
 8000e4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e4e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e52:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000e56:	fa93 f3a3 	rbit	r3, r3
 8000e5a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e5e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e62:	fab3 f383 	clz	r3, r3
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e6a:	d802      	bhi.n	8000e72 <HAL_RCC_OscConfig+0x8a>
 8000e6c:	4ba2      	ldr	r3, [pc, #648]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	e015      	b.n	8000e9e <HAL_RCC_OscConfig+0xb6>
 8000e72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e76:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000e7e:	fa93 f3a3 	rbit	r3, r3
 8000e82:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e8a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e8e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000e92:	fa93 f3a3 	rbit	r3, r3
 8000e96:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000e9a:	4b97      	ldr	r3, [pc, #604]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ea2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000ea6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000eaa:	fa92 f2a2 	rbit	r2, r2
 8000eae:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000eb2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000eb6:	fab2 f282 	clz	r2, r2
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	f042 0220 	orr.w	r2, r2, #32
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	f002 021f 	and.w	r2, r2, #31
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 8114 	beq.w	80010fc <HAL_RCC_OscConfig+0x314>
 8000ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ed8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f040 810b 	bne.w	80010fc <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f000 bf85 	b.w	8001df6 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ef0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000efc:	d106      	bne.n	8000f0c <HAL_RCC_OscConfig+0x124>
 8000efe:	4b7e      	ldr	r3, [pc, #504]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a7d      	ldr	r2, [pc, #500]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e036      	b.n	8000f7a <HAL_RCC_OscConfig+0x192>
 8000f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10c      	bne.n	8000f36 <HAL_RCC_OscConfig+0x14e>
 8000f1c:	4b76      	ldr	r3, [pc, #472]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a75      	ldr	r2, [pc, #468]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b73      	ldr	r3, [pc, #460]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a72      	ldr	r2, [pc, #456]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	e021      	b.n	8000f7a <HAL_RCC_OscConfig+0x192>
 8000f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f46:	d10c      	bne.n	8000f62 <HAL_RCC_OscConfig+0x17a>
 8000f48:	4b6b      	ldr	r3, [pc, #428]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a6a      	ldr	r2, [pc, #424]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b68      	ldr	r3, [pc, #416]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a67      	ldr	r2, [pc, #412]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e00b      	b.n	8000f7a <HAL_RCC_OscConfig+0x192>
 8000f62:	4b65      	ldr	r3, [pc, #404]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a64      	ldr	r2, [pc, #400]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b62      	ldr	r3, [pc, #392]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a61      	ldr	r2, [pc, #388]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f7e:	f023 020f 	bic.w	r2, r3, #15
 8000f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	495a      	ldr	r1, [pc, #360]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d054      	beq.n	800104e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fc98 	bl	80008d8 <HAL_GetTick>
 8000fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fac:	e00a      	b.n	8000fc4 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fae:	f7ff fc93 	bl	80008d8 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	@ 0x64
 8000fbc:	d902      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	f000 bf19 	b.w	8001df6 <HAL_RCC_OscConfig+0x100e>
 8000fc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fc8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fcc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000fd0:	fa93 f3a3 	rbit	r3, r3
 8000fd4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000fd8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fdc:	fab3 f383 	clz	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fe4:	d802      	bhi.n	8000fec <HAL_RCC_OscConfig+0x204>
 8000fe6:	4b44      	ldr	r3, [pc, #272]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	e015      	b.n	8001018 <HAL_RCC_OscConfig+0x230>
 8000fec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ff0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000ff8:	fa93 f3a3 	rbit	r3, r3
 8000ffc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001000:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001004:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001008:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800100c:	fa93 f3a3 	rbit	r3, r3
 8001010:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001014:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8001016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001018:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800101c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001020:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001024:	fa92 f2a2 	rbit	r2, r2
 8001028:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800102c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001030:	fab2 f282 	clz	r2, r2
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	f042 0220 	orr.w	r2, r2, #32
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	f002 021f 	and.w	r2, r2, #31
 8001040:	2101      	movs	r1, #1
 8001042:	fa01 f202 	lsl.w	r2, r1, r2
 8001046:	4013      	ands	r3, r2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0b0      	beq.n	8000fae <HAL_RCC_OscConfig+0x1c6>
 800104c:	e057      	b.n	80010fe <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104e:	f7ff fc43 	bl	80008d8 <HAL_GetTick>
 8001052:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001056:	e00a      	b.n	800106e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fc3e 	bl	80008d8 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b64      	cmp	r3, #100	@ 0x64
 8001066:	d902      	bls.n	800106e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	f000 bec4 	b.w	8001df6 <HAL_RCC_OscConfig+0x100e>
 800106e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001072:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800107a:	fa93 f3a3 	rbit	r3, r3
 800107e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001082:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001086:	fab3 f383 	clz	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b3f      	cmp	r3, #63	@ 0x3f
 800108e:	d802      	bhi.n	8001096 <HAL_RCC_OscConfig+0x2ae>
 8001090:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	e015      	b.n	80010c2 <HAL_RCC_OscConfig+0x2da>
 8001096:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800109a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80010aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010ae:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80010b2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80010b6:	fa93 f3a3 	rbit	r3, r3
 80010ba:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80010be:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <HAL_RCC_OscConfig+0x310>)
 80010c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010c6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80010ca:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80010ce:	fa92 f2a2 	rbit	r2, r2
 80010d2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80010d6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80010da:	fab2 f282 	clz	r2, r2
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f042 0220 	orr.w	r2, r2, #32
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	f002 021f 	and.w	r2, r2, #31
 80010ea:	2101      	movs	r1, #1
 80010ec:	fa01 f202 	lsl.w	r2, r1, r2
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1b0      	bne.n	8001058 <HAL_RCC_OscConfig+0x270>
 80010f6:	e002      	b.n	80010fe <HAL_RCC_OscConfig+0x316>
 80010f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001102:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 816c 	beq.w	80013ec <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001114:	4bcc      	ldr	r3, [pc, #816]	@ (8001448 <HAL_RCC_OscConfig+0x660>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 030c 	and.w	r3, r3, #12
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00b      	beq.n	8001138 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001120:	4bc9      	ldr	r3, [pc, #804]	@ (8001448 <HAL_RCC_OscConfig+0x660>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	2b08      	cmp	r3, #8
 800112a:	d16d      	bne.n	8001208 <HAL_RCC_OscConfig+0x420>
 800112c:	4bc6      	ldr	r3, [pc, #792]	@ (8001448 <HAL_RCC_OscConfig+0x660>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d167      	bne.n	8001208 <HAL_RCC_OscConfig+0x420>
 8001138:	2302      	movs	r3, #2
 800113a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001142:	fa93 f3a3 	rbit	r3, r3
 8001146:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800114a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114e:	fab3 f383 	clz	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b3f      	cmp	r3, #63	@ 0x3f
 8001156:	d802      	bhi.n	800115e <HAL_RCC_OscConfig+0x376>
 8001158:	4bbb      	ldr	r3, [pc, #748]	@ (8001448 <HAL_RCC_OscConfig+0x660>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	e013      	b.n	8001186 <HAL_RCC_OscConfig+0x39e>
 800115e:	2302      	movs	r3, #2
 8001160:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001176:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800117a:	fa93 f3a3 	rbit	r3, r3
 800117e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001182:	4bb1      	ldr	r3, [pc, #708]	@ (8001448 <HAL_RCC_OscConfig+0x660>)
 8001184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001186:	2202      	movs	r2, #2
 8001188:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800118c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001190:	fa92 f2a2 	rbit	r2, r2
 8001194:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001198:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800119c:	fab2 f282 	clz	r2, r2
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	f042 0220 	orr.w	r2, r2, #32
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	f002 021f 	and.w	r2, r2, #31
 80011ac:	2101      	movs	r1, #1
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00a      	beq.n	80011ce <HAL_RCC_OscConfig+0x3e6>
 80011b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d002      	beq.n	80011ce <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	f000 be14 	b.w	8001df6 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4b9e      	ldr	r3, [pc, #632]	@ (8001448 <HAL_RCC_OscConfig+0x660>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	21f8      	movs	r1, #248	@ 0xf8
 80011e4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80011ec:	fa91 f1a1 	rbit	r1, r1
 80011f0:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80011f4:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80011f8:	fab1 f181 	clz	r1, r1
 80011fc:	b2c9      	uxtb	r1, r1
 80011fe:	408b      	lsls	r3, r1
 8001200:	4991      	ldr	r1, [pc, #580]	@ (8001448 <HAL_RCC_OscConfig+0x660>)
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	e0f1      	b.n	80013ec <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800120c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 8083 	beq.w	8001320 <HAL_RCC_OscConfig+0x538>
 800121a:	2301      	movs	r3, #1
 800121c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800122c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001230:	fab3 f383 	clz	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800123a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	461a      	mov	r2, r3
 8001242:	2301      	movs	r3, #1
 8001244:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fb47 	bl	80008d8 <HAL_GetTick>
 800124a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124e:	e00a      	b.n	8001266 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001250:	f7ff fb42 	bl	80008d8 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d902      	bls.n	8001266 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	f000 bdc8 	b.w	8001df6 <HAL_RCC_OscConfig+0x100e>
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001278:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	fab3 f383 	clz	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b3f      	cmp	r3, #63	@ 0x3f
 8001284:	d802      	bhi.n	800128c <HAL_RCC_OscConfig+0x4a4>
 8001286:	4b70      	ldr	r3, [pc, #448]	@ (8001448 <HAL_RCC_OscConfig+0x660>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	e013      	b.n	80012b4 <HAL_RCC_OscConfig+0x4cc>
 800128c:	2302      	movs	r3, #2
 800128e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80012a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80012a8:	fa93 f3a3 	rbit	r3, r3
 80012ac:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80012b0:	4b65      	ldr	r3, [pc, #404]	@ (8001448 <HAL_RCC_OscConfig+0x660>)
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	2202      	movs	r2, #2
 80012b6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80012ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80012be:	fa92 f2a2 	rbit	r2, r2
 80012c2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80012c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80012ca:	fab2 f282 	clz	r2, r2
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	f042 0220 	orr.w	r2, r2, #32
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	f002 021f 	and.w	r2, r2, #31
 80012da:	2101      	movs	r1, #1
 80012dc:	fa01 f202 	lsl.w	r2, r1, r2
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0b4      	beq.n	8001250 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4b58      	ldr	r3, [pc, #352]	@ (8001448 <HAL_RCC_OscConfig+0x660>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	21f8      	movs	r1, #248	@ 0xf8
 80012fc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001300:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001304:	fa91 f1a1 	rbit	r1, r1
 8001308:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800130c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001310:	fab1 f181 	clz	r1, r1
 8001314:	b2c9      	uxtb	r1, r1
 8001316:	408b      	lsls	r3, r1
 8001318:	494b      	ldr	r1, [pc, #300]	@ (8001448 <HAL_RCC_OscConfig+0x660>)
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
 800131e:	e065      	b.n	80013ec <HAL_RCC_OscConfig+0x604>
 8001320:	2301      	movs	r3, #1
 8001322:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001332:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001340:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	461a      	mov	r2, r3
 8001348:	2300      	movs	r3, #0
 800134a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fac4 	bl	80008d8 <HAL_GetTick>
 8001350:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001354:	e00a      	b.n	800136c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fabf 	bl	80008d8 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d902      	bls.n	800136c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	f000 bd45 	b.w	8001df6 <HAL_RCC_OscConfig+0x100e>
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001376:	fa93 f3a3 	rbit	r3, r3
 800137a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800137e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001382:	fab3 f383 	clz	r3, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b3f      	cmp	r3, #63	@ 0x3f
 800138a:	d802      	bhi.n	8001392 <HAL_RCC_OscConfig+0x5aa>
 800138c:	4b2e      	ldr	r3, [pc, #184]	@ (8001448 <HAL_RCC_OscConfig+0x660>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	e013      	b.n	80013ba <HAL_RCC_OscConfig+0x5d2>
 8001392:	2302      	movs	r3, #2
 8001394:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001398:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800139c:	fa93 f3a3 	rbit	r3, r3
 80013a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80013a4:	2302      	movs	r3, #2
 80013a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80013aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80013b6:	4b24      	ldr	r3, [pc, #144]	@ (8001448 <HAL_RCC_OscConfig+0x660>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ba:	2202      	movs	r2, #2
 80013bc:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80013c0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80013c4:	fa92 f2a2 	rbit	r2, r2
 80013c8:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80013cc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80013d0:	fab2 f282 	clz	r2, r2
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	f042 0220 	orr.w	r2, r2, #32
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	f002 021f 	and.w	r2, r2, #31
 80013e0:	2101      	movs	r1, #1
 80013e2:	fa01 f202 	lsl.w	r2, r1, r2
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1b4      	bne.n	8001356 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 8115 	beq.w	800162c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001406:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d07e      	beq.n	8001510 <HAL_RCC_OscConfig+0x728>
 8001412:	2301      	movs	r3, #1
 8001414:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_RCC_OscConfig+0x664>)
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	461a      	mov	r2, r3
 8001438:	2301      	movs	r3, #1
 800143a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143c:	f7ff fa4c 	bl	80008d8 <HAL_GetTick>
 8001440:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001444:	e00f      	b.n	8001466 <HAL_RCC_OscConfig+0x67e>
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000
 800144c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff fa42 	bl	80008d8 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d902      	bls.n	8001466 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	f000 bcc8 	b.w	8001df6 <HAL_RCC_OscConfig+0x100e>
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001470:	fa93 f3a3 	rbit	r3, r3
 8001474:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800147c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001480:	2202      	movs	r2, #2
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001488:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	fa93 f2a3 	rbit	r2, r3
 8001492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001496:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014a4:	2202      	movs	r2, #2
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	fa93 f2a3 	rbit	r2, r3
 80014b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c0:	4bb0      	ldr	r3, [pc, #704]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 80014c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014cc:	2102      	movs	r1, #2
 80014ce:	6019      	str	r1, [r3, #0]
 80014d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	fa93 f1a3 	rbit	r1, r3
 80014de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014e6:	6019      	str	r1, [r3, #0]
  return result;
 80014e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	fab3 f383 	clz	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	2101      	movs	r1, #1
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0a0      	beq.n	8001450 <HAL_RCC_OscConfig+0x668>
 800150e:	e08d      	b.n	800162c <HAL_RCC_OscConfig+0x844>
 8001510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001514:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001518:	2201      	movs	r2, #1
 800151a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001520:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	fa93 f2a3 	rbit	r2, r3
 800152a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800152e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001532:	601a      	str	r2, [r3, #0]
  return result;
 8001534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001538:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800153c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153e:	fab3 f383 	clz	r3, r3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	4b90      	ldr	r3, [pc, #576]	@ (8001788 <HAL_RCC_OscConfig+0x9a0>)
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	461a      	mov	r2, r3
 800154e:	2300      	movs	r3, #0
 8001550:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001552:	f7ff f9c1 	bl	80008d8 <HAL_GetTick>
 8001556:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155a:	e00a      	b.n	8001572 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff f9bc 	bl	80008d8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d902      	bls.n	8001572 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	f000 bc42 	b.w	8001df6 <HAL_RCC_OscConfig+0x100e>
 8001572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001576:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800157a:	2202      	movs	r2, #2
 800157c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001582:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	fa93 f2a3 	rbit	r2, r3
 800158c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001590:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800159a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800159e:	2202      	movs	r2, #2
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	fa93 f2a3 	rbit	r2, r3
 80015b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015c2:	2202      	movs	r2, #2
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	fa93 f2a3 	rbit	r2, r3
 80015d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015de:	4b69      	ldr	r3, [pc, #420]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 80015e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015ea:	2102      	movs	r1, #2
 80015ec:	6019      	str	r1, [r3, #0]
 80015ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	fa93 f1a3 	rbit	r1, r3
 80015fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001600:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001604:	6019      	str	r1, [r3, #0]
  return result;
 8001606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	fab3 f383 	clz	r3, r3
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	2101      	movs	r1, #1
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	4013      	ands	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d197      	bne.n	800155c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800162c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001630:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 819e 	beq.w	800197e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001648:	4b4e      	ldr	r3, [pc, #312]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d116      	bne.n	8001682 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001654:	4b4b      	ldr	r3, [pc, #300]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	4a4a      	ldr	r2, [pc, #296]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165e:	61d3      	str	r3, [r2, #28]
 8001660:	4b48      	ldr	r3, [pc, #288]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800166c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001676:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800167a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800167c:	2301      	movs	r3, #1
 800167e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001682:	4b42      	ldr	r3, [pc, #264]	@ (800178c <HAL_RCC_OscConfig+0x9a4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d11a      	bne.n	80016c4 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168e:	4b3f      	ldr	r3, [pc, #252]	@ (800178c <HAL_RCC_OscConfig+0x9a4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a3e      	ldr	r2, [pc, #248]	@ (800178c <HAL_RCC_OscConfig+0x9a4>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001698:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169a:	f7ff f91d 	bl	80008d8 <HAL_GetTick>
 800169e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	e009      	b.n	80016b8 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a4:	f7ff f918 	bl	80008d8 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b64      	cmp	r3, #100	@ 0x64
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e39e      	b.n	8001df6 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	4b34      	ldr	r3, [pc, #208]	@ (800178c <HAL_RCC_OscConfig+0x9a4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ef      	beq.n	80016a4 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d106      	bne.n	80016e2 <HAL_RCC_OscConfig+0x8fa>
 80016d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6213      	str	r3, [r2, #32]
 80016e0:	e035      	b.n	800174e <HAL_RCC_OscConfig+0x966>
 80016e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x924>
 80016f2:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4a23      	ldr	r2, [pc, #140]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	6213      	str	r3, [r2, #32]
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4a20      	ldr	r2, [pc, #128]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	6213      	str	r3, [r2, #32]
 800170a:	e020      	b.n	800174e <HAL_RCC_OscConfig+0x966>
 800170c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001710:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b05      	cmp	r3, #5
 800171a:	d10c      	bne.n	8001736 <HAL_RCC_OscConfig+0x94e>
 800171c:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a18      	ldr	r2, [pc, #96]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a15      	ldr	r2, [pc, #84]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	e00b      	b.n	800174e <HAL_RCC_OscConfig+0x966>
 8001736:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6213      	str	r3, [r2, #32]
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a0f      	ldr	r2, [pc, #60]	@ (8001784 <HAL_RCC_OscConfig+0x99c>)
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800174e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001752:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8087 	beq.w	800186e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001760:	f7ff f8ba 	bl	80008d8 <HAL_GetTick>
 8001764:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001768:	e012      	b.n	8001790 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff f8b5 	bl	80008d8 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d908      	bls.n	8001790 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e339      	b.n	8001df6 <HAL_RCC_OscConfig+0x100e>
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	10908120 	.word	0x10908120
 800178c:	40007000 	.word	0x40007000
 8001790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001794:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001798:	2202      	movs	r2, #2
 800179a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017bc:	2202      	movs	r2, #2
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	fa93 f2a3 	rbit	r2, r3
 80017ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017d6:	601a      	str	r2, [r3, #0]
  return result;
 80017d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017dc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d102      	bne.n	80017f8 <HAL_RCC_OscConfig+0xa10>
 80017f2:	4b98      	ldr	r3, [pc, #608]	@ (8001a54 <HAL_RCC_OscConfig+0xc6c>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	e013      	b.n	8001820 <HAL_RCC_OscConfig+0xa38>
 80017f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001800:	2202      	movs	r2, #2
 8001802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001808:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	fa93 f2a3 	rbit	r2, r3
 8001812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001816:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	4b8d      	ldr	r3, [pc, #564]	@ (8001a54 <HAL_RCC_OscConfig+0xc6c>)
 800181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001820:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001824:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001828:	2102      	movs	r1, #2
 800182a:	6011      	str	r1, [r2, #0]
 800182c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001830:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	fa92 f1a2 	rbit	r1, r2
 800183a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800183e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001842:	6011      	str	r1, [r2, #0]
  return result;
 8001844:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001848:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	fab2 f282 	clz	r2, r2
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	f002 021f 	and.w	r2, r2, #31
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f202 	lsl.w	r2, r1, r2
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	f43f af7f 	beq.w	800176a <HAL_RCC_OscConfig+0x982>
 800186c:	e07d      	b.n	800196a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186e:	f7ff f833 	bl	80008d8 <HAL_GetTick>
 8001872:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001878:	f7ff f82e 	bl	80008d8 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e2b2      	b.n	8001df6 <HAL_RCC_OscConfig+0x100e>
 8001890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001894:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001898:	2202      	movs	r2, #2
 800189a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	fa93 f2a3 	rbit	r2, r3
 80018aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ae:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018bc:	2202      	movs	r2, #2
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	fa93 f2a3 	rbit	r2, r3
 80018ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018d6:	601a      	str	r2, [r3, #0]
  return result;
 80018d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018dc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e2:	fab3 f383 	clz	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <HAL_RCC_OscConfig+0xb10>
 80018f2:	4b58      	ldr	r3, [pc, #352]	@ (8001a54 <HAL_RCC_OscConfig+0xc6c>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	e013      	b.n	8001920 <HAL_RCC_OscConfig+0xb38>
 80018f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001900:	2202      	movs	r2, #2
 8001902:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001908:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	fa93 f2a3 	rbit	r2, r3
 8001912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001916:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	4b4d      	ldr	r3, [pc, #308]	@ (8001a54 <HAL_RCC_OscConfig+0xc6c>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001920:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001924:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001928:	2102      	movs	r1, #2
 800192a:	6011      	str	r1, [r2, #0]
 800192c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001930:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	fa92 f1a2 	rbit	r1, r2
 800193a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800193e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001942:	6011      	str	r1, [r2, #0]
  return result;
 8001944:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001948:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	fab2 f282 	clz	r2, r2
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	f002 021f 	and.w	r2, r2, #31
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f202 	lsl.w	r2, r1, r2
 8001964:	4013      	ands	r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d186      	bne.n	8001878 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800196a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800196e:	2b01      	cmp	r3, #1
 8001970:	d105      	bne.n	800197e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001972:	4b38      	ldr	r3, [pc, #224]	@ (8001a54 <HAL_RCC_OscConfig+0xc6c>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a37      	ldr	r2, [pc, #220]	@ (8001a54 <HAL_RCC_OscConfig+0xc6c>)
 8001978:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800197c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800197e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001982:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 8232 	beq.w	8001df4 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001990:	4b30      	ldr	r3, [pc, #192]	@ (8001a54 <HAL_RCC_OscConfig+0xc6c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	f000 8201 	beq.w	8001da0 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	f040 8157 	bne.w	8001c5e <HAL_RCC_OscConfig+0xe76>
 80019b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80019b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019d4:	601a      	str	r2, [r3, #0]
  return result;
 80019d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019da:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019de:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019ea:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	461a      	mov	r2, r3
 80019f2:	2300      	movs	r3, #0
 80019f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7fe ff6f 	bl	80008d8 <HAL_GetTick>
 80019fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fe:	e009      	b.n	8001a14 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a00:	f7fe ff6a 	bl	80008d8 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1f0      	b.n	8001df6 <HAL_RCC_OscConfig+0x100e>
 8001a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a18:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a26:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a34:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a38:	601a      	str	r2, [r3, #0]
  return result;
 8001a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a4c:	d804      	bhi.n	8001a58 <HAL_RCC_OscConfig+0xc70>
 8001a4e:	4b01      	ldr	r3, [pc, #4]	@ (8001a54 <HAL_RCC_OscConfig+0xc6c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	e029      	b.n	8001aa8 <HAL_RCC_OscConfig+0xcc0>
 8001a54:	40021000 	.word	0x40021000
 8001a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	fa93 f2a3 	rbit	r2, r3
 8001a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a78:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a82:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a90:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	fa93 f2a3 	rbit	r2, r3
 8001a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	4bc3      	ldr	r3, [pc, #780]	@ (8001db4 <HAL_RCC_OscConfig+0xfcc>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aac:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ab0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ab4:	6011      	str	r1, [r2, #0]
 8001ab6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aba:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	fa92 f1a2 	rbit	r1, r2
 8001ac4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ac8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001acc:	6011      	str	r1, [r2, #0]
  return result;
 8001ace:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ad2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	fab2 f282 	clz	r2, r2
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	f042 0220 	orr.w	r2, r2, #32
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f002 021f 	and.w	r2, r2, #31
 8001ae8:	2101      	movs	r1, #1
 8001aea:	fa01 f202 	lsl.w	r2, r1, r2
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d185      	bne.n	8001a00 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af4:	4baf      	ldr	r3, [pc, #700]	@ (8001db4 <HAL_RCC_OscConfig+0xfcc>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	49a7      	ldr	r1, [pc, #668]	@ (8001db4 <HAL_RCC_OscConfig+0xfcc>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
 8001b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b20:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	fa93 f2a3 	rbit	r2, r3
 8001b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b40:	601a      	str	r2, [r3, #0]
  return result;
 8001b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b46:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b4a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b56:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2301      	movs	r3, #1
 8001b60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7fe feb9 	bl	80008d8 <HAL_GetTick>
 8001b66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b6a:	e009      	b.n	8001b80 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7fe feb4 	bl	80008d8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e13a      	b.n	8001df6 <HAL_RCC_OscConfig+0x100e>
 8001b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b84:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b92:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fa93 f2a3 	rbit	r2, r3
 8001b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ba4:	601a      	str	r2, [r3, #0]
  return result;
 8001ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001baa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001bae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bb8:	d802      	bhi.n	8001bc0 <HAL_RCC_OscConfig+0xdd8>
 8001bba:	4b7e      	ldr	r3, [pc, #504]	@ (8001db4 <HAL_RCC_OscConfig+0xfcc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	e027      	b.n	8001c10 <HAL_RCC_OscConfig+0xe28>
 8001bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fa93 f2a3 	rbit	r2, r3
 8001bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bea:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001bee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	fa93 f2a3 	rbit	r2, r3
 8001c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c06:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	4b69      	ldr	r3, [pc, #420]	@ (8001db4 <HAL_RCC_OscConfig+0xfcc>)
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c14:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001c18:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c1c:	6011      	str	r1, [r2, #0]
 8001c1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c22:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	fa92 f1a2 	rbit	r1, r2
 8001c2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c30:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c34:	6011      	str	r1, [r2, #0]
  return result;
 8001c36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c3a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	fab2 f282 	clz	r2, r2
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	f042 0220 	orr.w	r2, r2, #32
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	f002 021f 	and.w	r2, r2, #31
 8001c50:	2101      	movs	r1, #1
 8001c52:	fa01 f202 	lsl.w	r2, r1, r2
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d087      	beq.n	8001b6c <HAL_RCC_OscConfig+0xd84>
 8001c5c:	e0ca      	b.n	8001df4 <HAL_RCC_OscConfig+0x100c>
 8001c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c62:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c66:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c70:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	fa93 f2a3 	rbit	r2, r3
 8001c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c82:	601a      	str	r2, [r3, #0]
  return result;
 8001c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c88:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7fe fe18 	bl	80008d8 <HAL_GetTick>
 8001ca8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cac:	e009      	b.n	8001cc2 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cae:	f7fe fe13 	bl	80008d8 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e099      	b.n	8001df6 <HAL_RCC_OscConfig+0x100e>
 8001cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001cca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	fa93 f2a3 	rbit	r2, r3
 8001cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ce6:	601a      	str	r2, [r3, #0]
  return result;
 8001ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cec:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001cf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cfa:	d802      	bhi.n	8001d02 <HAL_RCC_OscConfig+0xf1a>
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <HAL_RCC_OscConfig+0xfcc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	e027      	b.n	8001d52 <HAL_RCC_OscConfig+0xf6a>
 8001d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d06:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d14:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	fa93 f2a3 	rbit	r2, r3
 8001d1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d22:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d48:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_RCC_OscConfig+0xfcc>)
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d56:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d5a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d5e:	6011      	str	r1, [r2, #0]
 8001d60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d64:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	fa92 f1a2 	rbit	r1, r2
 8001d6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d72:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d76:	6011      	str	r1, [r2, #0]
  return result;
 8001d78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d7c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	fab2 f282 	clz	r2, r2
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	f042 0220 	orr.w	r2, r2, #32
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	f002 021f 	and.w	r2, r2, #31
 8001d92:	2101      	movs	r1, #1
 8001d94:	fa01 f202 	lsl.w	r2, r1, r2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d187      	bne.n	8001cae <HAL_RCC_OscConfig+0xec6>
 8001d9e:	e029      	b.n	8001df4 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d103      	bne.n	8001db8 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e020      	b.n	8001df6 <HAL_RCC_OscConfig+0x100e>
 8001db4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <HAL_RCC_OscConfig+0x1018>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dc0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001dc4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d10b      	bne.n	8001df0 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001dd8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001ddc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000

08001e04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b09e      	sub	sp, #120	@ 0x78
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e154      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b89      	ldr	r3, [pc, #548]	@ (8002044 <HAL_RCC_ClockConfig+0x240>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d910      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b86      	ldr	r3, [pc, #536]	@ (8002044 <HAL_RCC_ClockConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 0207 	bic.w	r2, r3, #7
 8001e32:	4984      	ldr	r1, [pc, #528]	@ (8002044 <HAL_RCC_ClockConfig+0x240>)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b82      	ldr	r3, [pc, #520]	@ (8002044 <HAL_RCC_ClockConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e13c      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b7b      	ldr	r3, [pc, #492]	@ (8002048 <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4978      	ldr	r1, [pc, #480]	@ (8002048 <HAL_RCC_ClockConfig+0x244>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80cd 	beq.w	8002012 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d137      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xec>
 8001e80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e84:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001e8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e98:	d802      	bhi.n	8001ea0 <HAL_RCC_ClockConfig+0x9c>
 8001e9a:	4b6b      	ldr	r3, [pc, #428]	@ (8002048 <HAL_RCC_ClockConfig+0x244>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	e00f      	b.n	8001ec0 <HAL_RCC_ClockConfig+0xbc>
 8001ea0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	667b      	str	r3, [r7, #100]	@ 0x64
 8001eae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001eb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ebc:	4b62      	ldr	r3, [pc, #392]	@ (8002048 <HAL_RCC_ClockConfig+0x244>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ec4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001ec6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ec8:	fa92 f2a2 	rbit	r2, r2
 8001ecc:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001ece:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ed0:	fab2 f282 	clz	r2, r2
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	f042 0220 	orr.w	r2, r2, #32
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	f002 021f 	and.w	r2, r2, #31
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d171      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0ea      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d137      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x164>
 8001ef8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001efc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f10:	d802      	bhi.n	8001f18 <HAL_RCC_ClockConfig+0x114>
 8001f12:	4b4d      	ldr	r3, [pc, #308]	@ (8002048 <HAL_RCC_ClockConfig+0x244>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	e00f      	b.n	8001f38 <HAL_RCC_ClockConfig+0x134>
 8001f18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f34:	4b44      	ldr	r3, [pc, #272]	@ (8002048 <HAL_RCC_ClockConfig+0x244>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f3c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f40:	fa92 f2a2 	rbit	r2, r2
 8001f44:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f48:	fab2 f282 	clz	r2, r2
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	f042 0220 	orr.w	r2, r2, #32
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	f002 021f 	and.w	r2, r2, #31
 8001f58:	2101      	movs	r1, #1
 8001f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d135      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0ae      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2c2>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f7e:	d802      	bhi.n	8001f86 <HAL_RCC_ClockConfig+0x182>
 8001f80:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	e00d      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x19e>
 8001f86:	2302      	movs	r3, #2
 8001f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f92:	2302      	movs	r3, #2
 8001f94:	623b      	str	r3, [r7, #32]
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <HAL_RCC_ClockConfig+0x244>)
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	61ba      	str	r2, [r7, #24]
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	fa92 f2a2 	rbit	r2, r2
 8001fac:	617a      	str	r2, [r7, #20]
  return result;
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	fab2 f282 	clz	r2, r2
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	f042 0220 	orr.w	r2, r2, #32
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	f002 021f 	and.w	r2, r2, #31
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e07a      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f023 0203 	bic.w	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	491a      	ldr	r1, [pc, #104]	@ (8002048 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe2:	f7fe fc79 	bl	80008d8 <HAL_GetTick>
 8001fe6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fea:	f7fe fc75 	bl	80008d8 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e062      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_RCC_ClockConfig+0x244>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 020c 	and.w	r2, r3, #12
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	429a      	cmp	r2, r3
 8002010:	d1eb      	bne.n	8001fea <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002012:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <HAL_RCC_ClockConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d215      	bcs.n	800204c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002020:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <HAL_RCC_ClockConfig+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 0207 	bic.w	r2, r3, #7
 8002028:	4906      	ldr	r1, [pc, #24]	@ (8002044 <HAL_RCC_ClockConfig+0x240>)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002030:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <HAL_RCC_ClockConfig+0x240>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d006      	beq.n	800204c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e041      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2c2>
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002058:	4b1d      	ldr	r3, [pc, #116]	@ (80020d0 <HAL_RCC_ClockConfig+0x2cc>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	491a      	ldr	r1, [pc, #104]	@ (80020d0 <HAL_RCC_ClockConfig+0x2cc>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002076:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <HAL_RCC_ClockConfig+0x2cc>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4912      	ldr	r1, [pc, #72]	@ (80020d0 <HAL_RCC_ClockConfig+0x2cc>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800208a:	f000 f829 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800208e:	4601      	mov	r1, r0
 8002090:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <HAL_RCC_ClockConfig+0x2cc>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002098:	22f0      	movs	r2, #240	@ 0xf0
 800209a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	fa92 f2a2 	rbit	r2, r2
 80020a2:	60fa      	str	r2, [r7, #12]
  return result;
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	fab2 f282 	clz	r2, r2
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	40d3      	lsrs	r3, r2
 80020ae:	4a09      	ldr	r2, [pc, #36]	@ (80020d4 <HAL_RCC_ClockConfig+0x2d0>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
 80020b2:	fa21 f303 	lsr.w	r3, r1, r3
 80020b6:	4a08      	ldr	r2, [pc, #32]	@ (80020d8 <HAL_RCC_ClockConfig+0x2d4>)
 80020b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020ba:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <HAL_RCC_ClockConfig+0x2d8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fbc6 	bl	8000850 <HAL_InitTick>
  
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3778      	adds	r7, #120	@ 0x78
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08003f18 	.word	0x08003f18
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80020fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x94>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b04      	cmp	r3, #4
 8002108:	d002      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x30>
 800210a:	2b08      	cmp	r3, #8
 800210c:	d003      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0x36>
 800210e:	e026      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002110:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x98>)
 8002112:	613b      	str	r3, [r7, #16]
      break;
 8002114:	e026      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	0c9b      	lsrs	r3, r3, #18
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	4a17      	ldr	r2, [pc, #92]	@ (800217c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002120:	5cd3      	ldrb	r3, [r2, r3]
 8002122:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002124:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x94>)
 8002126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	4a14      	ldr	r2, [pc, #80]	@ (8002180 <HAL_RCC_GetSysClockFreq+0xa0>)
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800213c:	4a0e      	ldr	r2, [pc, #56]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x98>)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	fbb2 f2f3 	udiv	r2, r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	e004      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a0c      	ldr	r2, [pc, #48]	@ (8002184 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	613b      	str	r3, [r7, #16]
      break;
 800215c:	e002      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x98>)
 8002160:	613b      	str	r3, [r7, #16]
      break;
 8002162:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002164:	693b      	ldr	r3, [r7, #16]
}
 8002166:	4618      	mov	r0, r3
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	007a1200 	.word	0x007a1200
 800217c:	08003f30 	.word	0x08003f30
 8002180:	08003f40 	.word	0x08003f40
 8002184:	003d0900 	.word	0x003d0900

08002188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800218c:	4b03      	ldr	r3, [pc, #12]	@ (800219c <HAL_RCC_GetHCLKFreq+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000000 	.word	0x20000000

080021a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021a6:	f7ff ffef 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021aa:	4601      	mov	r1, r0
 80021ac:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80021b4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80021b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	fa92 f2a2 	rbit	r2, r2
 80021c0:	603a      	str	r2, [r7, #0]
  return result;
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	fab2 f282 	clz	r2, r2
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	40d3      	lsrs	r3, r2
 80021cc:	4a04      	ldr	r2, [pc, #16]	@ (80021e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08003f28 	.word	0x08003f28

080021e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021ea:	f7ff ffcd 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021ee:	4601      	mov	r1, r0
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80021f8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80021fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	fa92 f2a2 	rbit	r2, r2
 8002204:	603a      	str	r2, [r7, #0]
  return result;
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	fab2 f282 	clz	r2, r2
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	40d3      	lsrs	r3, r2
 8002210:	4a04      	ldr	r2, [pc, #16]	@ (8002224 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002212:	5cd3      	ldrb	r3, [r2, r3]
 8002214:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	08003f28 	.word	0x08003f28

08002228 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e097      	b.n	800236c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d106      	bne.n	8002256 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7fe f971 	bl	8000538 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800226c:	f023 0307 	bic.w	r3, r3, #7
 8002270:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3304      	adds	r3, #4
 800227a:	4619      	mov	r1, r3
 800227c:	4610      	mov	r0, r2
 800227e:	f000 f907 	bl	8002490 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022aa:	f023 0303 	bic.w	r3, r3, #3
 80022ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	4313      	orrs	r3, r2
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80022c8:	f023 030c 	bic.w	r3, r3, #12
 80022cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80022d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	4313      	orrs	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	011a      	lsls	r2, r3, #4
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	031b      	lsls	r3, r3, #12
 80022f8:	4313      	orrs	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002306:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800230e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	4313      	orrs	r3, r2
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002384:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800238c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002394:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800239c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d110      	bne.n	80023c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d102      	bne.n	80023b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80023aa:	7b7b      	ldrb	r3, [r7, #13]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d001      	beq.n	80023b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e069      	b.n	8002488 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023c4:	e031      	b.n	800242a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d110      	bne.n	80023ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80023cc:	7bbb      	ldrb	r3, [r7, #14]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d102      	bne.n	80023d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80023d2:	7b3b      	ldrb	r3, [r7, #12]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d001      	beq.n	80023dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e055      	b.n	8002488 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023ec:	e01d      	b.n	800242a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d108      	bne.n	8002406 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80023f4:	7bbb      	ldrb	r3, [r7, #14]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d105      	bne.n	8002406 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80023fa:	7b7b      	ldrb	r3, [r7, #13]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d102      	bne.n	8002406 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002400:	7b3b      	ldrb	r3, [r7, #12]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d001      	beq.n	800240a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e03e      	b.n	8002488 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2202      	movs	r2, #2
 800240e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2202      	movs	r2, #2
 8002416:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_TIM_Encoder_Start+0xc4>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2b04      	cmp	r3, #4
 8002434:	d008      	beq.n	8002448 <HAL_TIM_Encoder_Start+0xd4>
 8002436:	e00f      	b.n	8002458 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2201      	movs	r2, #1
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f8a9 	bl	8002598 <TIM_CCxChannelCmd>
      break;
 8002446:	e016      	b.n	8002476 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2201      	movs	r2, #1
 800244e:	2104      	movs	r1, #4
 8002450:	4618      	mov	r0, r3
 8002452:	f000 f8a1 	bl	8002598 <TIM_CCxChannelCmd>
      break;
 8002456:	e00e      	b.n	8002476 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2201      	movs	r2, #1
 800245e:	2100      	movs	r1, #0
 8002460:	4618      	mov	r0, r3
 8002462:	f000 f899 	bl	8002598 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2201      	movs	r2, #1
 800246c:	2104      	movs	r1, #4
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f892 	bl	8002598 <TIM_CCxChannelCmd>
      break;
 8002474:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0201 	orr.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a38      	ldr	r2, [pc, #224]	@ (8002584 <TIM_Base_SetConfig+0xf4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d007      	beq.n	80024b8 <TIM_Base_SetConfig+0x28>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ae:	d003      	beq.n	80024b8 <TIM_Base_SetConfig+0x28>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a35      	ldr	r2, [pc, #212]	@ (8002588 <TIM_Base_SetConfig+0xf8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d108      	bne.n	80024ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002584 <TIM_Base_SetConfig+0xf4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <TIM_Base_SetConfig+0x6a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d8:	d00f      	beq.n	80024fa <TIM_Base_SetConfig+0x6a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002588 <TIM_Base_SetConfig+0xf8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00b      	beq.n	80024fa <TIM_Base_SetConfig+0x6a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a29      	ldr	r2, [pc, #164]	@ (800258c <TIM_Base_SetConfig+0xfc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <TIM_Base_SetConfig+0x6a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a28      	ldr	r2, [pc, #160]	@ (8002590 <TIM_Base_SetConfig+0x100>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <TIM_Base_SetConfig+0x6a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a27      	ldr	r2, [pc, #156]	@ (8002594 <TIM_Base_SetConfig+0x104>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d108      	bne.n	800250c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a14      	ldr	r2, [pc, #80]	@ (8002584 <TIM_Base_SetConfig+0xf4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d00b      	beq.n	8002550 <TIM_Base_SetConfig+0xc0>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a14      	ldr	r2, [pc, #80]	@ (800258c <TIM_Base_SetConfig+0xfc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d007      	beq.n	8002550 <TIM_Base_SetConfig+0xc0>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a13      	ldr	r2, [pc, #76]	@ (8002590 <TIM_Base_SetConfig+0x100>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d003      	beq.n	8002550 <TIM_Base_SetConfig+0xc0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a12      	ldr	r2, [pc, #72]	@ (8002594 <TIM_Base_SetConfig+0x104>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d103      	bne.n	8002558 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b01      	cmp	r3, #1
 8002568:	d105      	bne.n	8002576 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f023 0201 	bic.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	611a      	str	r2, [r3, #16]
  }
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40000400 	.word	0x40000400
 800258c:	40014000 	.word	0x40014000
 8002590:	40014400 	.word	0x40014400
 8002594:	40014800 	.word	0x40014800

08002598 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2201      	movs	r2, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a1a      	ldr	r2, [r3, #32]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	401a      	ands	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1a      	ldr	r2, [r3, #32]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	621a      	str	r2, [r3, #32]
}
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e054      	b.n	80026a6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a24      	ldr	r2, [pc, #144]	@ (80026b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d108      	bne.n	8002638 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800262c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800263e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d00e      	beq.n	800267a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002664:	d009      	beq.n	800267a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a13      	ldr	r2, [pc, #76]	@ (80026b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d004      	beq.n	800267a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a11      	ldr	r2, [pc, #68]	@ (80026bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d10c      	bne.n	8002694 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	4313      	orrs	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40012c00 	.word	0x40012c00
 80026b8:	40000400 	.word	0x40000400
 80026bc:	40014000 	.word	0x40014000

080026c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e040      	b.n	8002754 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fd ff68 	bl	80005b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2224      	movs	r2, #36	@ 0x24
 80026ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0201 	bic.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f9e8 	bl	8002adc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f8af 	bl	8002870 <UART_SetConfig>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e01b      	b.n	8002754 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800272a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800273a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fa67 	bl	8002c20 <UART_CheckIdleState>
 8002752:	4603      	mov	r3, r0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	@ 0x28
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002770:	2b20      	cmp	r3, #32
 8002772:	d177      	bne.n	8002864 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_UART_Transmit+0x24>
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e070      	b.n	8002866 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2221      	movs	r2, #33	@ 0x21
 8002790:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002792:	f7fe f8a1 	bl	80008d8 <HAL_GetTick>
 8002796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	88fa      	ldrh	r2, [r7, #6]
 800279c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	88fa      	ldrh	r2, [r7, #6]
 80027a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027b0:	d108      	bne.n	80027c4 <HAL_UART_Transmit+0x68>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d104      	bne.n	80027c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	e003      	b.n	80027cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027cc:	e02f      	b.n	800282e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2200      	movs	r2, #0
 80027d6:	2180      	movs	r1, #128	@ 0x80
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fac9 	bl	8002d70 <UART_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d004      	beq.n	80027ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e03b      	b.n	8002866 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	881a      	ldrh	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002800:	b292      	uxth	r2, r2
 8002802:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	3302      	adds	r3, #2
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	e007      	b.n	800281c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3301      	adds	r3, #1
 800281a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1c9      	bne.n	80027ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2200      	movs	r2, #0
 8002842:	2140      	movs	r1, #64	@ 0x40
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fa93 	bl	8002d70 <UART_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e005      	b.n	8002866 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002864:	2302      	movs	r3, #2
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3720      	adds	r7, #32
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b8a      	ldr	r3, [pc, #552]	@ (8002ac4 <UART_SetConfig+0x254>)
 800289c:	4013      	ands	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	6979      	ldr	r1, [r7, #20]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	430a      	orrs	r2, r1
 80028e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a78      	ldr	r2, [pc, #480]	@ (8002ac8 <UART_SetConfig+0x258>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d120      	bne.n	800292e <UART_SetConfig+0xbe>
 80028ec:	4b77      	ldr	r3, [pc, #476]	@ (8002acc <UART_SetConfig+0x25c>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d817      	bhi.n	8002928 <UART_SetConfig+0xb8>
 80028f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002900 <UART_SetConfig+0x90>)
 80028fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fe:	bf00      	nop
 8002900:	08002911 	.word	0x08002911
 8002904:	0800291d 	.word	0x0800291d
 8002908:	08002923 	.word	0x08002923
 800290c:	08002917 	.word	0x08002917
 8002910:	2300      	movs	r3, #0
 8002912:	77fb      	strb	r3, [r7, #31]
 8002914:	e01d      	b.n	8002952 <UART_SetConfig+0xe2>
 8002916:	2302      	movs	r3, #2
 8002918:	77fb      	strb	r3, [r7, #31]
 800291a:	e01a      	b.n	8002952 <UART_SetConfig+0xe2>
 800291c:	2304      	movs	r3, #4
 800291e:	77fb      	strb	r3, [r7, #31]
 8002920:	e017      	b.n	8002952 <UART_SetConfig+0xe2>
 8002922:	2308      	movs	r3, #8
 8002924:	77fb      	strb	r3, [r7, #31]
 8002926:	e014      	b.n	8002952 <UART_SetConfig+0xe2>
 8002928:	2310      	movs	r3, #16
 800292a:	77fb      	strb	r3, [r7, #31]
 800292c:	e011      	b.n	8002952 <UART_SetConfig+0xe2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a67      	ldr	r2, [pc, #412]	@ (8002ad0 <UART_SetConfig+0x260>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d102      	bne.n	800293e <UART_SetConfig+0xce>
 8002938:	2300      	movs	r3, #0
 800293a:	77fb      	strb	r3, [r7, #31]
 800293c:	e009      	b.n	8002952 <UART_SetConfig+0xe2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a64      	ldr	r2, [pc, #400]	@ (8002ad4 <UART_SetConfig+0x264>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d102      	bne.n	800294e <UART_SetConfig+0xde>
 8002948:	2300      	movs	r3, #0
 800294a:	77fb      	strb	r3, [r7, #31]
 800294c:	e001      	b.n	8002952 <UART_SetConfig+0xe2>
 800294e:	2310      	movs	r3, #16
 8002950:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800295a:	d15a      	bne.n	8002a12 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800295c:	7ffb      	ldrb	r3, [r7, #31]
 800295e:	2b08      	cmp	r3, #8
 8002960:	d827      	bhi.n	80029b2 <UART_SetConfig+0x142>
 8002962:	a201      	add	r2, pc, #4	@ (adr r2, 8002968 <UART_SetConfig+0xf8>)
 8002964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002968:	0800298d 	.word	0x0800298d
 800296c:	08002995 	.word	0x08002995
 8002970:	0800299d 	.word	0x0800299d
 8002974:	080029b3 	.word	0x080029b3
 8002978:	080029a3 	.word	0x080029a3
 800297c:	080029b3 	.word	0x080029b3
 8002980:	080029b3 	.word	0x080029b3
 8002984:	080029b3 	.word	0x080029b3
 8002988:	080029ab 	.word	0x080029ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800298c:	f7ff fc08 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 8002990:	61b8      	str	r0, [r7, #24]
        break;
 8002992:	e013      	b.n	80029bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002994:	f7ff fc26 	bl	80021e4 <HAL_RCC_GetPCLK2Freq>
 8002998:	61b8      	str	r0, [r7, #24]
        break;
 800299a:	e00f      	b.n	80029bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800299c:	4b4e      	ldr	r3, [pc, #312]	@ (8002ad8 <UART_SetConfig+0x268>)
 800299e:	61bb      	str	r3, [r7, #24]
        break;
 80029a0:	e00c      	b.n	80029bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029a2:	f7ff fb9d 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 80029a6:	61b8      	str	r0, [r7, #24]
        break;
 80029a8:	e008      	b.n	80029bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029ae:	61bb      	str	r3, [r7, #24]
        break;
 80029b0:	e004      	b.n	80029bc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	77bb      	strb	r3, [r7, #30]
        break;
 80029ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d074      	beq.n	8002aac <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	005a      	lsls	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	441a      	add	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	2b0f      	cmp	r3, #15
 80029dc:	d916      	bls.n	8002a0c <UART_SetConfig+0x19c>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e4:	d212      	bcs.n	8002a0c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f023 030f 	bic.w	r3, r3, #15
 80029ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	085b      	lsrs	r3, r3, #1
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	89fb      	ldrh	r3, [r7, #14]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	89fa      	ldrh	r2, [r7, #14]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	e04f      	b.n	8002aac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	77bb      	strb	r3, [r7, #30]
 8002a10:	e04c      	b.n	8002aac <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a12:	7ffb      	ldrb	r3, [r7, #31]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d828      	bhi.n	8002a6a <UART_SetConfig+0x1fa>
 8002a18:	a201      	add	r2, pc, #4	@ (adr r2, 8002a20 <UART_SetConfig+0x1b0>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a45 	.word	0x08002a45
 8002a24:	08002a4d 	.word	0x08002a4d
 8002a28:	08002a55 	.word	0x08002a55
 8002a2c:	08002a6b 	.word	0x08002a6b
 8002a30:	08002a5b 	.word	0x08002a5b
 8002a34:	08002a6b 	.word	0x08002a6b
 8002a38:	08002a6b 	.word	0x08002a6b
 8002a3c:	08002a6b 	.word	0x08002a6b
 8002a40:	08002a63 	.word	0x08002a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a44:	f7ff fbac 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 8002a48:	61b8      	str	r0, [r7, #24]
        break;
 8002a4a:	e013      	b.n	8002a74 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a4c:	f7ff fbca 	bl	80021e4 <HAL_RCC_GetPCLK2Freq>
 8002a50:	61b8      	str	r0, [r7, #24]
        break;
 8002a52:	e00f      	b.n	8002a74 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a54:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <UART_SetConfig+0x268>)
 8002a56:	61bb      	str	r3, [r7, #24]
        break;
 8002a58:	e00c      	b.n	8002a74 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a5a:	f7ff fb41 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8002a5e:	61b8      	str	r0, [r7, #24]
        break;
 8002a60:	e008      	b.n	8002a74 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a66:	61bb      	str	r3, [r7, #24]
        break;
 8002a68:	e004      	b.n	8002a74 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	77bb      	strb	r3, [r7, #30]
        break;
 8002a72:	bf00      	nop
    }

    if (pclk != 0U)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d018      	beq.n	8002aac <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	085a      	lsrs	r2, r3, #1
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	441a      	add	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b0f      	cmp	r3, #15
 8002a92:	d909      	bls.n	8002aa8 <UART_SetConfig+0x238>
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a9a:	d205      	bcs.n	8002aa8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	e001      	b.n	8002aac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002ab8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3720      	adds	r7, #32
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	efff69f3 	.word	0xefff69f3
 8002ac8:	40013800 	.word	0x40013800
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40004400 	.word	0x40004400
 8002ad4:	40004800 	.word	0x40004800
 8002ad8:	007a1200 	.word	0x007a1200

08002adc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01a      	beq.n	8002bf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bda:	d10a      	bne.n	8002bf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
  }
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b098      	sub	sp, #96	@ 0x60
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c30:	f7fd fe52 	bl	80008d8 <HAL_GetTick>
 8002c34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d12e      	bne.n	8002ca2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f88c 	bl	8002d70 <UART_WaitOnFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d021      	beq.n	8002ca2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c66:	e853 3f00 	ldrex	r3, [r3]
 8002c6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c72:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c84:	e841 2300 	strex	r3, r2, [r1]
 8002c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1e6      	bne.n	8002c5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e062      	b.n	8002d68 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d149      	bne.n	8002d44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f856 	bl	8002d70 <UART_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d03c      	beq.n	8002d44 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cf0:	e841 2300 	strex	r3, r2, [r1]
 8002cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e6      	bne.n	8002cca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3308      	adds	r3, #8
 8002d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3308      	adds	r3, #8
 8002d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d1c:	61fa      	str	r2, [r7, #28]
 8002d1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	69b9      	ldr	r1, [r7, #24]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	e841 2300 	strex	r3, r2, [r1]
 8002d28:	617b      	str	r3, [r7, #20]
   return(result);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e5      	bne.n	8002cfc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e011      	b.n	8002d68 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3758      	adds	r7, #88	@ 0x58
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d80:	e04f      	b.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d04b      	beq.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8a:	f7fd fda5 	bl	80008d8 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d302      	bcc.n	8002da0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e04e      	b.n	8002e42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d037      	beq.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b80      	cmp	r3, #128	@ 0x80
 8002db6:	d034      	beq.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b40      	cmp	r3, #64	@ 0x40
 8002dbc:	d031      	beq.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d110      	bne.n	8002dee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f838 	bl	8002e4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2208      	movs	r2, #8
 8002dde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e029      	b.n	8002e42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dfc:	d111      	bne.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f81e 	bl	8002e4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e00f      	b.n	8002e42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	bf0c      	ite	eq
 8002e32:	2301      	moveq	r3, #1
 8002e34:	2300      	movne	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d0a0      	beq.n	8002d82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b095      	sub	sp, #84	@ 0x54
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e70:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e72:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e78:	e841 2300 	strex	r3, r2, [r1]
 8002e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e6      	bne.n	8002e52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3308      	adds	r3, #8
 8002e8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ea4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eac:	e841 2300 	strex	r3, r2, [r1]
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e5      	bne.n	8002e84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d118      	bne.n	8002ef2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f023 0310 	bic.w	r3, r3, #16
 8002ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee2:	6979      	ldr	r1, [r7, #20]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	e841 2300 	strex	r3, r2, [r1]
 8002eea:	613b      	str	r3, [r7, #16]
   return(result);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e6      	bne.n	8002ec0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002f06:	bf00      	nop
 8002f08:	3754      	adds	r7, #84	@ 0x54
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <std>:
 8002f14:	2300      	movs	r3, #0
 8002f16:	b510      	push	{r4, lr}
 8002f18:	4604      	mov	r4, r0
 8002f1a:	e9c0 3300 	strd	r3, r3, [r0]
 8002f1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f22:	6083      	str	r3, [r0, #8]
 8002f24:	8181      	strh	r1, [r0, #12]
 8002f26:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f28:	81c2      	strh	r2, [r0, #14]
 8002f2a:	6183      	str	r3, [r0, #24]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	2208      	movs	r2, #8
 8002f30:	305c      	adds	r0, #92	@ 0x5c
 8002f32:	f000 f9c2 	bl	80032ba <memset>
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <std+0x58>)
 8002f38:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <std+0x5c>)
 8002f3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f74 <std+0x60>)
 8002f40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f42:	4b0d      	ldr	r3, [pc, #52]	@ (8002f78 <std+0x64>)
 8002f44:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f46:	4b0d      	ldr	r3, [pc, #52]	@ (8002f7c <std+0x68>)
 8002f48:	6224      	str	r4, [r4, #32]
 8002f4a:	429c      	cmp	r4, r3
 8002f4c:	d006      	beq.n	8002f5c <std+0x48>
 8002f4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f52:	4294      	cmp	r4, r2
 8002f54:	d002      	beq.n	8002f5c <std+0x48>
 8002f56:	33d0      	adds	r3, #208	@ 0xd0
 8002f58:	429c      	cmp	r4, r3
 8002f5a:	d105      	bne.n	8002f68 <std+0x54>
 8002f5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f64:	f000 ba22 	b.w	80033ac <__retarget_lock_init_recursive>
 8002f68:	bd10      	pop	{r4, pc}
 8002f6a:	bf00      	nop
 8002f6c:	08003235 	.word	0x08003235
 8002f70:	08003257 	.word	0x08003257
 8002f74:	0800328f 	.word	0x0800328f
 8002f78:	080032b3 	.word	0x080032b3
 8002f7c:	20000160 	.word	0x20000160

08002f80 <stdio_exit_handler>:
 8002f80:	4a02      	ldr	r2, [pc, #8]	@ (8002f8c <stdio_exit_handler+0xc>)
 8002f82:	4903      	ldr	r1, [pc, #12]	@ (8002f90 <stdio_exit_handler+0x10>)
 8002f84:	4803      	ldr	r0, [pc, #12]	@ (8002f94 <stdio_exit_handler+0x14>)
 8002f86:	f000 b869 	b.w	800305c <_fwalk_sglue>
 8002f8a:	bf00      	nop
 8002f8c:	2000000c 	.word	0x2000000c
 8002f90:	08003c59 	.word	0x08003c59
 8002f94:	2000001c 	.word	0x2000001c

08002f98 <cleanup_stdio>:
 8002f98:	6841      	ldr	r1, [r0, #4]
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002fcc <cleanup_stdio+0x34>)
 8002f9c:	4299      	cmp	r1, r3
 8002f9e:	b510      	push	{r4, lr}
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	d001      	beq.n	8002fa8 <cleanup_stdio+0x10>
 8002fa4:	f000 fe58 	bl	8003c58 <_fflush_r>
 8002fa8:	68a1      	ldr	r1, [r4, #8]
 8002faa:	4b09      	ldr	r3, [pc, #36]	@ (8002fd0 <cleanup_stdio+0x38>)
 8002fac:	4299      	cmp	r1, r3
 8002fae:	d002      	beq.n	8002fb6 <cleanup_stdio+0x1e>
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f000 fe51 	bl	8003c58 <_fflush_r>
 8002fb6:	68e1      	ldr	r1, [r4, #12]
 8002fb8:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <cleanup_stdio+0x3c>)
 8002fba:	4299      	cmp	r1, r3
 8002fbc:	d004      	beq.n	8002fc8 <cleanup_stdio+0x30>
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc4:	f000 be48 	b.w	8003c58 <_fflush_r>
 8002fc8:	bd10      	pop	{r4, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000160 	.word	0x20000160
 8002fd0:	200001c8 	.word	0x200001c8
 8002fd4:	20000230 	.word	0x20000230

08002fd8 <global_stdio_init.part.0>:
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <global_stdio_init.part.0+0x30>)
 8002fdc:	4c0b      	ldr	r4, [pc, #44]	@ (800300c <global_stdio_init.part.0+0x34>)
 8002fde:	4a0c      	ldr	r2, [pc, #48]	@ (8003010 <global_stdio_init.part.0+0x38>)
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2104      	movs	r1, #4
 8002fe8:	f7ff ff94 	bl	8002f14 <std>
 8002fec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	2109      	movs	r1, #9
 8002ff4:	f7ff ff8e 	bl	8002f14 <std>
 8002ff8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003002:	2112      	movs	r1, #18
 8003004:	f7ff bf86 	b.w	8002f14 <std>
 8003008:	20000298 	.word	0x20000298
 800300c:	20000160 	.word	0x20000160
 8003010:	08002f81 	.word	0x08002f81

08003014 <__sfp_lock_acquire>:
 8003014:	4801      	ldr	r0, [pc, #4]	@ (800301c <__sfp_lock_acquire+0x8>)
 8003016:	f000 b9ca 	b.w	80033ae <__retarget_lock_acquire_recursive>
 800301a:	bf00      	nop
 800301c:	200002a1 	.word	0x200002a1

08003020 <__sfp_lock_release>:
 8003020:	4801      	ldr	r0, [pc, #4]	@ (8003028 <__sfp_lock_release+0x8>)
 8003022:	f000 b9c5 	b.w	80033b0 <__retarget_lock_release_recursive>
 8003026:	bf00      	nop
 8003028:	200002a1 	.word	0x200002a1

0800302c <__sinit>:
 800302c:	b510      	push	{r4, lr}
 800302e:	4604      	mov	r4, r0
 8003030:	f7ff fff0 	bl	8003014 <__sfp_lock_acquire>
 8003034:	6a23      	ldr	r3, [r4, #32]
 8003036:	b11b      	cbz	r3, 8003040 <__sinit+0x14>
 8003038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800303c:	f7ff bff0 	b.w	8003020 <__sfp_lock_release>
 8003040:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <__sinit+0x28>)
 8003042:	6223      	str	r3, [r4, #32]
 8003044:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <__sinit+0x2c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f5      	bne.n	8003038 <__sinit+0xc>
 800304c:	f7ff ffc4 	bl	8002fd8 <global_stdio_init.part.0>
 8003050:	e7f2      	b.n	8003038 <__sinit+0xc>
 8003052:	bf00      	nop
 8003054:	08002f99 	.word	0x08002f99
 8003058:	20000298 	.word	0x20000298

0800305c <_fwalk_sglue>:
 800305c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003060:	4607      	mov	r7, r0
 8003062:	4688      	mov	r8, r1
 8003064:	4614      	mov	r4, r2
 8003066:	2600      	movs	r6, #0
 8003068:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800306c:	f1b9 0901 	subs.w	r9, r9, #1
 8003070:	d505      	bpl.n	800307e <_fwalk_sglue+0x22>
 8003072:	6824      	ldr	r4, [r4, #0]
 8003074:	2c00      	cmp	r4, #0
 8003076:	d1f7      	bne.n	8003068 <_fwalk_sglue+0xc>
 8003078:	4630      	mov	r0, r6
 800307a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800307e:	89ab      	ldrh	r3, [r5, #12]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d907      	bls.n	8003094 <_fwalk_sglue+0x38>
 8003084:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003088:	3301      	adds	r3, #1
 800308a:	d003      	beq.n	8003094 <_fwalk_sglue+0x38>
 800308c:	4629      	mov	r1, r5
 800308e:	4638      	mov	r0, r7
 8003090:	47c0      	blx	r8
 8003092:	4306      	orrs	r6, r0
 8003094:	3568      	adds	r5, #104	@ 0x68
 8003096:	e7e9      	b.n	800306c <_fwalk_sglue+0x10>

08003098 <iprintf>:
 8003098:	b40f      	push	{r0, r1, r2, r3}
 800309a:	b507      	push	{r0, r1, r2, lr}
 800309c:	4906      	ldr	r1, [pc, #24]	@ (80030b8 <iprintf+0x20>)
 800309e:	ab04      	add	r3, sp, #16
 80030a0:	6808      	ldr	r0, [r1, #0]
 80030a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80030a6:	6881      	ldr	r1, [r0, #8]
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	f000 faad 	bl	8003608 <_vfiprintf_r>
 80030ae:	b003      	add	sp, #12
 80030b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80030b4:	b004      	add	sp, #16
 80030b6:	4770      	bx	lr
 80030b8:	20000018 	.word	0x20000018

080030bc <setbuf>:
 80030bc:	fab1 f281 	clz	r2, r1
 80030c0:	0952      	lsrs	r2, r2, #5
 80030c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030c6:	0052      	lsls	r2, r2, #1
 80030c8:	f000 b800 	b.w	80030cc <setvbuf>

080030cc <setvbuf>:
 80030cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80030d0:	461d      	mov	r5, r3
 80030d2:	4b57      	ldr	r3, [pc, #348]	@ (8003230 <setvbuf+0x164>)
 80030d4:	681f      	ldr	r7, [r3, #0]
 80030d6:	4604      	mov	r4, r0
 80030d8:	460e      	mov	r6, r1
 80030da:	4690      	mov	r8, r2
 80030dc:	b127      	cbz	r7, 80030e8 <setvbuf+0x1c>
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	b913      	cbnz	r3, 80030e8 <setvbuf+0x1c>
 80030e2:	4638      	mov	r0, r7
 80030e4:	f7ff ffa2 	bl	800302c <__sinit>
 80030e8:	f1b8 0f02 	cmp.w	r8, #2
 80030ec:	d006      	beq.n	80030fc <setvbuf+0x30>
 80030ee:	f1b8 0f01 	cmp.w	r8, #1
 80030f2:	f200 809a 	bhi.w	800322a <setvbuf+0x15e>
 80030f6:	2d00      	cmp	r5, #0
 80030f8:	f2c0 8097 	blt.w	800322a <setvbuf+0x15e>
 80030fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030fe:	07d9      	lsls	r1, r3, #31
 8003100:	d405      	bmi.n	800310e <setvbuf+0x42>
 8003102:	89a3      	ldrh	r3, [r4, #12]
 8003104:	059a      	lsls	r2, r3, #22
 8003106:	d402      	bmi.n	800310e <setvbuf+0x42>
 8003108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800310a:	f000 f950 	bl	80033ae <__retarget_lock_acquire_recursive>
 800310e:	4621      	mov	r1, r4
 8003110:	4638      	mov	r0, r7
 8003112:	f000 fda1 	bl	8003c58 <_fflush_r>
 8003116:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003118:	b141      	cbz	r1, 800312c <setvbuf+0x60>
 800311a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800311e:	4299      	cmp	r1, r3
 8003120:	d002      	beq.n	8003128 <setvbuf+0x5c>
 8003122:	4638      	mov	r0, r7
 8003124:	f000 f946 	bl	80033b4 <_free_r>
 8003128:	2300      	movs	r3, #0
 800312a:	6363      	str	r3, [r4, #52]	@ 0x34
 800312c:	2300      	movs	r3, #0
 800312e:	61a3      	str	r3, [r4, #24]
 8003130:	6063      	str	r3, [r4, #4]
 8003132:	89a3      	ldrh	r3, [r4, #12]
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	d503      	bpl.n	8003140 <setvbuf+0x74>
 8003138:	6921      	ldr	r1, [r4, #16]
 800313a:	4638      	mov	r0, r7
 800313c:	f000 f93a 	bl	80033b4 <_free_r>
 8003140:	89a3      	ldrh	r3, [r4, #12]
 8003142:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	f1b8 0f02 	cmp.w	r8, #2
 800314e:	81a3      	strh	r3, [r4, #12]
 8003150:	d061      	beq.n	8003216 <setvbuf+0x14a>
 8003152:	ab01      	add	r3, sp, #4
 8003154:	466a      	mov	r2, sp
 8003156:	4621      	mov	r1, r4
 8003158:	4638      	mov	r0, r7
 800315a:	f000 fda5 	bl	8003ca8 <__swhatbuf_r>
 800315e:	89a3      	ldrh	r3, [r4, #12]
 8003160:	4318      	orrs	r0, r3
 8003162:	81a0      	strh	r0, [r4, #12]
 8003164:	bb2d      	cbnz	r5, 80031b2 <setvbuf+0xe6>
 8003166:	9d00      	ldr	r5, [sp, #0]
 8003168:	4628      	mov	r0, r5
 800316a:	f000 f96d 	bl	8003448 <malloc>
 800316e:	4606      	mov	r6, r0
 8003170:	2800      	cmp	r0, #0
 8003172:	d152      	bne.n	800321a <setvbuf+0x14e>
 8003174:	f8dd 9000 	ldr.w	r9, [sp]
 8003178:	45a9      	cmp	r9, r5
 800317a:	d140      	bne.n	80031fe <setvbuf+0x132>
 800317c:	f04f 35ff 	mov.w	r5, #4294967295
 8003180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003184:	f043 0202 	orr.w	r2, r3, #2
 8003188:	81a2      	strh	r2, [r4, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	60a2      	str	r2, [r4, #8]
 800318e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8003192:	6022      	str	r2, [r4, #0]
 8003194:	6122      	str	r2, [r4, #16]
 8003196:	2201      	movs	r2, #1
 8003198:	6162      	str	r2, [r4, #20]
 800319a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800319c:	07d6      	lsls	r6, r2, #31
 800319e:	d404      	bmi.n	80031aa <setvbuf+0xde>
 80031a0:	0598      	lsls	r0, r3, #22
 80031a2:	d402      	bmi.n	80031aa <setvbuf+0xde>
 80031a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031a6:	f000 f903 	bl	80033b0 <__retarget_lock_release_recursive>
 80031aa:	4628      	mov	r0, r5
 80031ac:	b003      	add	sp, #12
 80031ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031b2:	2e00      	cmp	r6, #0
 80031b4:	d0d8      	beq.n	8003168 <setvbuf+0x9c>
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	b913      	cbnz	r3, 80031c0 <setvbuf+0xf4>
 80031ba:	4638      	mov	r0, r7
 80031bc:	f7ff ff36 	bl	800302c <__sinit>
 80031c0:	f1b8 0f01 	cmp.w	r8, #1
 80031c4:	bf08      	it	eq
 80031c6:	89a3      	ldrheq	r3, [r4, #12]
 80031c8:	6026      	str	r6, [r4, #0]
 80031ca:	bf04      	itt	eq
 80031cc:	f043 0301 	orreq.w	r3, r3, #1
 80031d0:	81a3      	strheq	r3, [r4, #12]
 80031d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031d6:	f013 0208 	ands.w	r2, r3, #8
 80031da:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80031de:	d01e      	beq.n	800321e <setvbuf+0x152>
 80031e0:	07d9      	lsls	r1, r3, #31
 80031e2:	bf41      	itttt	mi
 80031e4:	2200      	movmi	r2, #0
 80031e6:	426d      	negmi	r5, r5
 80031e8:	60a2      	strmi	r2, [r4, #8]
 80031ea:	61a5      	strmi	r5, [r4, #24]
 80031ec:	bf58      	it	pl
 80031ee:	60a5      	strpl	r5, [r4, #8]
 80031f0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80031f2:	07d2      	lsls	r2, r2, #31
 80031f4:	d401      	bmi.n	80031fa <setvbuf+0x12e>
 80031f6:	059b      	lsls	r3, r3, #22
 80031f8:	d513      	bpl.n	8003222 <setvbuf+0x156>
 80031fa:	2500      	movs	r5, #0
 80031fc:	e7d5      	b.n	80031aa <setvbuf+0xde>
 80031fe:	4648      	mov	r0, r9
 8003200:	f000 f922 	bl	8003448 <malloc>
 8003204:	4606      	mov	r6, r0
 8003206:	2800      	cmp	r0, #0
 8003208:	d0b8      	beq.n	800317c <setvbuf+0xb0>
 800320a:	89a3      	ldrh	r3, [r4, #12]
 800320c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003210:	81a3      	strh	r3, [r4, #12]
 8003212:	464d      	mov	r5, r9
 8003214:	e7cf      	b.n	80031b6 <setvbuf+0xea>
 8003216:	2500      	movs	r5, #0
 8003218:	e7b2      	b.n	8003180 <setvbuf+0xb4>
 800321a:	46a9      	mov	r9, r5
 800321c:	e7f5      	b.n	800320a <setvbuf+0x13e>
 800321e:	60a2      	str	r2, [r4, #8]
 8003220:	e7e6      	b.n	80031f0 <setvbuf+0x124>
 8003222:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003224:	f000 f8c4 	bl	80033b0 <__retarget_lock_release_recursive>
 8003228:	e7e7      	b.n	80031fa <setvbuf+0x12e>
 800322a:	f04f 35ff 	mov.w	r5, #4294967295
 800322e:	e7bc      	b.n	80031aa <setvbuf+0xde>
 8003230:	20000018 	.word	0x20000018

08003234 <__sread>:
 8003234:	b510      	push	{r4, lr}
 8003236:	460c      	mov	r4, r1
 8003238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800323c:	f000 f868 	bl	8003310 <_read_r>
 8003240:	2800      	cmp	r0, #0
 8003242:	bfab      	itete	ge
 8003244:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003246:	89a3      	ldrhlt	r3, [r4, #12]
 8003248:	181b      	addge	r3, r3, r0
 800324a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800324e:	bfac      	ite	ge
 8003250:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003252:	81a3      	strhlt	r3, [r4, #12]
 8003254:	bd10      	pop	{r4, pc}

08003256 <__swrite>:
 8003256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800325a:	461f      	mov	r7, r3
 800325c:	898b      	ldrh	r3, [r1, #12]
 800325e:	05db      	lsls	r3, r3, #23
 8003260:	4605      	mov	r5, r0
 8003262:	460c      	mov	r4, r1
 8003264:	4616      	mov	r6, r2
 8003266:	d505      	bpl.n	8003274 <__swrite+0x1e>
 8003268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800326c:	2302      	movs	r3, #2
 800326e:	2200      	movs	r2, #0
 8003270:	f000 f83c 	bl	80032ec <_lseek_r>
 8003274:	89a3      	ldrh	r3, [r4, #12]
 8003276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800327a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800327e:	81a3      	strh	r3, [r4, #12]
 8003280:	4632      	mov	r2, r6
 8003282:	463b      	mov	r3, r7
 8003284:	4628      	mov	r0, r5
 8003286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800328a:	f000 b853 	b.w	8003334 <_write_r>

0800328e <__sseek>:
 800328e:	b510      	push	{r4, lr}
 8003290:	460c      	mov	r4, r1
 8003292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003296:	f000 f829 	bl	80032ec <_lseek_r>
 800329a:	1c43      	adds	r3, r0, #1
 800329c:	89a3      	ldrh	r3, [r4, #12]
 800329e:	bf15      	itete	ne
 80032a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80032a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80032a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80032aa:	81a3      	strheq	r3, [r4, #12]
 80032ac:	bf18      	it	ne
 80032ae:	81a3      	strhne	r3, [r4, #12]
 80032b0:	bd10      	pop	{r4, pc}

080032b2 <__sclose>:
 80032b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032b6:	f000 b809 	b.w	80032cc <_close_r>

080032ba <memset>:
 80032ba:	4402      	add	r2, r0
 80032bc:	4603      	mov	r3, r0
 80032be:	4293      	cmp	r3, r2
 80032c0:	d100      	bne.n	80032c4 <memset+0xa>
 80032c2:	4770      	bx	lr
 80032c4:	f803 1b01 	strb.w	r1, [r3], #1
 80032c8:	e7f9      	b.n	80032be <memset+0x4>
	...

080032cc <_close_r>:
 80032cc:	b538      	push	{r3, r4, r5, lr}
 80032ce:	4d06      	ldr	r5, [pc, #24]	@ (80032e8 <_close_r+0x1c>)
 80032d0:	2300      	movs	r3, #0
 80032d2:	4604      	mov	r4, r0
 80032d4:	4608      	mov	r0, r1
 80032d6:	602b      	str	r3, [r5, #0]
 80032d8:	f7fd f9fe 	bl	80006d8 <_close>
 80032dc:	1c43      	adds	r3, r0, #1
 80032de:	d102      	bne.n	80032e6 <_close_r+0x1a>
 80032e0:	682b      	ldr	r3, [r5, #0]
 80032e2:	b103      	cbz	r3, 80032e6 <_close_r+0x1a>
 80032e4:	6023      	str	r3, [r4, #0]
 80032e6:	bd38      	pop	{r3, r4, r5, pc}
 80032e8:	2000029c 	.word	0x2000029c

080032ec <_lseek_r>:
 80032ec:	b538      	push	{r3, r4, r5, lr}
 80032ee:	4d07      	ldr	r5, [pc, #28]	@ (800330c <_lseek_r+0x20>)
 80032f0:	4604      	mov	r4, r0
 80032f2:	4608      	mov	r0, r1
 80032f4:	4611      	mov	r1, r2
 80032f6:	2200      	movs	r2, #0
 80032f8:	602a      	str	r2, [r5, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f7fd fa13 	bl	8000726 <_lseek>
 8003300:	1c43      	adds	r3, r0, #1
 8003302:	d102      	bne.n	800330a <_lseek_r+0x1e>
 8003304:	682b      	ldr	r3, [r5, #0]
 8003306:	b103      	cbz	r3, 800330a <_lseek_r+0x1e>
 8003308:	6023      	str	r3, [r4, #0]
 800330a:	bd38      	pop	{r3, r4, r5, pc}
 800330c:	2000029c 	.word	0x2000029c

08003310 <_read_r>:
 8003310:	b538      	push	{r3, r4, r5, lr}
 8003312:	4d07      	ldr	r5, [pc, #28]	@ (8003330 <_read_r+0x20>)
 8003314:	4604      	mov	r4, r0
 8003316:	4608      	mov	r0, r1
 8003318:	4611      	mov	r1, r2
 800331a:	2200      	movs	r2, #0
 800331c:	602a      	str	r2, [r5, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	f7fd f9bd 	bl	800069e <_read>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d102      	bne.n	800332e <_read_r+0x1e>
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	b103      	cbz	r3, 800332e <_read_r+0x1e>
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	bd38      	pop	{r3, r4, r5, pc}
 8003330:	2000029c 	.word	0x2000029c

08003334 <_write_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	4d07      	ldr	r5, [pc, #28]	@ (8003354 <_write_r+0x20>)
 8003338:	4604      	mov	r4, r0
 800333a:	4608      	mov	r0, r1
 800333c:	4611      	mov	r1, r2
 800333e:	2200      	movs	r2, #0
 8003340:	602a      	str	r2, [r5, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	f7fd f8ba 	bl	80004bc <_write>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d102      	bne.n	8003352 <_write_r+0x1e>
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	b103      	cbz	r3, 8003352 <_write_r+0x1e>
 8003350:	6023      	str	r3, [r4, #0]
 8003352:	bd38      	pop	{r3, r4, r5, pc}
 8003354:	2000029c 	.word	0x2000029c

08003358 <__errno>:
 8003358:	4b01      	ldr	r3, [pc, #4]	@ (8003360 <__errno+0x8>)
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000018 	.word	0x20000018

08003364 <__libc_init_array>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	4d0d      	ldr	r5, [pc, #52]	@ (800339c <__libc_init_array+0x38>)
 8003368:	4c0d      	ldr	r4, [pc, #52]	@ (80033a0 <__libc_init_array+0x3c>)
 800336a:	1b64      	subs	r4, r4, r5
 800336c:	10a4      	asrs	r4, r4, #2
 800336e:	2600      	movs	r6, #0
 8003370:	42a6      	cmp	r6, r4
 8003372:	d109      	bne.n	8003388 <__libc_init_array+0x24>
 8003374:	4d0b      	ldr	r5, [pc, #44]	@ (80033a4 <__libc_init_array+0x40>)
 8003376:	4c0c      	ldr	r4, [pc, #48]	@ (80033a8 <__libc_init_array+0x44>)
 8003378:	f000 fdbe 	bl	8003ef8 <_init>
 800337c:	1b64      	subs	r4, r4, r5
 800337e:	10a4      	asrs	r4, r4, #2
 8003380:	2600      	movs	r6, #0
 8003382:	42a6      	cmp	r6, r4
 8003384:	d105      	bne.n	8003392 <__libc_init_array+0x2e>
 8003386:	bd70      	pop	{r4, r5, r6, pc}
 8003388:	f855 3b04 	ldr.w	r3, [r5], #4
 800338c:	4798      	blx	r3
 800338e:	3601      	adds	r6, #1
 8003390:	e7ee      	b.n	8003370 <__libc_init_array+0xc>
 8003392:	f855 3b04 	ldr.w	r3, [r5], #4
 8003396:	4798      	blx	r3
 8003398:	3601      	adds	r6, #1
 800339a:	e7f2      	b.n	8003382 <__libc_init_array+0x1e>
 800339c:	08003f8c 	.word	0x08003f8c
 80033a0:	08003f8c 	.word	0x08003f8c
 80033a4:	08003f8c 	.word	0x08003f8c
 80033a8:	08003f90 	.word	0x08003f90

080033ac <__retarget_lock_init_recursive>:
 80033ac:	4770      	bx	lr

080033ae <__retarget_lock_acquire_recursive>:
 80033ae:	4770      	bx	lr

080033b0 <__retarget_lock_release_recursive>:
 80033b0:	4770      	bx	lr
	...

080033b4 <_free_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	4605      	mov	r5, r0
 80033b8:	2900      	cmp	r1, #0
 80033ba:	d041      	beq.n	8003440 <_free_r+0x8c>
 80033bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033c0:	1f0c      	subs	r4, r1, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bfb8      	it	lt
 80033c6:	18e4      	addlt	r4, r4, r3
 80033c8:	f000 f8e8 	bl	800359c <__malloc_lock>
 80033cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003444 <_free_r+0x90>)
 80033ce:	6813      	ldr	r3, [r2, #0]
 80033d0:	b933      	cbnz	r3, 80033e0 <_free_r+0x2c>
 80033d2:	6063      	str	r3, [r4, #4]
 80033d4:	6014      	str	r4, [r2, #0]
 80033d6:	4628      	mov	r0, r5
 80033d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033dc:	f000 b8e4 	b.w	80035a8 <__malloc_unlock>
 80033e0:	42a3      	cmp	r3, r4
 80033e2:	d908      	bls.n	80033f6 <_free_r+0x42>
 80033e4:	6820      	ldr	r0, [r4, #0]
 80033e6:	1821      	adds	r1, r4, r0
 80033e8:	428b      	cmp	r3, r1
 80033ea:	bf01      	itttt	eq
 80033ec:	6819      	ldreq	r1, [r3, #0]
 80033ee:	685b      	ldreq	r3, [r3, #4]
 80033f0:	1809      	addeq	r1, r1, r0
 80033f2:	6021      	streq	r1, [r4, #0]
 80033f4:	e7ed      	b.n	80033d2 <_free_r+0x1e>
 80033f6:	461a      	mov	r2, r3
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	b10b      	cbz	r3, 8003400 <_free_r+0x4c>
 80033fc:	42a3      	cmp	r3, r4
 80033fe:	d9fa      	bls.n	80033f6 <_free_r+0x42>
 8003400:	6811      	ldr	r1, [r2, #0]
 8003402:	1850      	adds	r0, r2, r1
 8003404:	42a0      	cmp	r0, r4
 8003406:	d10b      	bne.n	8003420 <_free_r+0x6c>
 8003408:	6820      	ldr	r0, [r4, #0]
 800340a:	4401      	add	r1, r0
 800340c:	1850      	adds	r0, r2, r1
 800340e:	4283      	cmp	r3, r0
 8003410:	6011      	str	r1, [r2, #0]
 8003412:	d1e0      	bne.n	80033d6 <_free_r+0x22>
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	6053      	str	r3, [r2, #4]
 800341a:	4408      	add	r0, r1
 800341c:	6010      	str	r0, [r2, #0]
 800341e:	e7da      	b.n	80033d6 <_free_r+0x22>
 8003420:	d902      	bls.n	8003428 <_free_r+0x74>
 8003422:	230c      	movs	r3, #12
 8003424:	602b      	str	r3, [r5, #0]
 8003426:	e7d6      	b.n	80033d6 <_free_r+0x22>
 8003428:	6820      	ldr	r0, [r4, #0]
 800342a:	1821      	adds	r1, r4, r0
 800342c:	428b      	cmp	r3, r1
 800342e:	bf04      	itt	eq
 8003430:	6819      	ldreq	r1, [r3, #0]
 8003432:	685b      	ldreq	r3, [r3, #4]
 8003434:	6063      	str	r3, [r4, #4]
 8003436:	bf04      	itt	eq
 8003438:	1809      	addeq	r1, r1, r0
 800343a:	6021      	streq	r1, [r4, #0]
 800343c:	6054      	str	r4, [r2, #4]
 800343e:	e7ca      	b.n	80033d6 <_free_r+0x22>
 8003440:	bd38      	pop	{r3, r4, r5, pc}
 8003442:	bf00      	nop
 8003444:	200002a8 	.word	0x200002a8

08003448 <malloc>:
 8003448:	4b02      	ldr	r3, [pc, #8]	@ (8003454 <malloc+0xc>)
 800344a:	4601      	mov	r1, r0
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	f000 b825 	b.w	800349c <_malloc_r>
 8003452:	bf00      	nop
 8003454:	20000018 	.word	0x20000018

08003458 <sbrk_aligned>:
 8003458:	b570      	push	{r4, r5, r6, lr}
 800345a:	4e0f      	ldr	r6, [pc, #60]	@ (8003498 <sbrk_aligned+0x40>)
 800345c:	460c      	mov	r4, r1
 800345e:	6831      	ldr	r1, [r6, #0]
 8003460:	4605      	mov	r5, r0
 8003462:	b911      	cbnz	r1, 800346a <sbrk_aligned+0x12>
 8003464:	f000 fd38 	bl	8003ed8 <_sbrk_r>
 8003468:	6030      	str	r0, [r6, #0]
 800346a:	4621      	mov	r1, r4
 800346c:	4628      	mov	r0, r5
 800346e:	f000 fd33 	bl	8003ed8 <_sbrk_r>
 8003472:	1c43      	adds	r3, r0, #1
 8003474:	d103      	bne.n	800347e <sbrk_aligned+0x26>
 8003476:	f04f 34ff 	mov.w	r4, #4294967295
 800347a:	4620      	mov	r0, r4
 800347c:	bd70      	pop	{r4, r5, r6, pc}
 800347e:	1cc4      	adds	r4, r0, #3
 8003480:	f024 0403 	bic.w	r4, r4, #3
 8003484:	42a0      	cmp	r0, r4
 8003486:	d0f8      	beq.n	800347a <sbrk_aligned+0x22>
 8003488:	1a21      	subs	r1, r4, r0
 800348a:	4628      	mov	r0, r5
 800348c:	f000 fd24 	bl	8003ed8 <_sbrk_r>
 8003490:	3001      	adds	r0, #1
 8003492:	d1f2      	bne.n	800347a <sbrk_aligned+0x22>
 8003494:	e7ef      	b.n	8003476 <sbrk_aligned+0x1e>
 8003496:	bf00      	nop
 8003498:	200002a4 	.word	0x200002a4

0800349c <_malloc_r>:
 800349c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034a0:	1ccd      	adds	r5, r1, #3
 80034a2:	f025 0503 	bic.w	r5, r5, #3
 80034a6:	3508      	adds	r5, #8
 80034a8:	2d0c      	cmp	r5, #12
 80034aa:	bf38      	it	cc
 80034ac:	250c      	movcc	r5, #12
 80034ae:	2d00      	cmp	r5, #0
 80034b0:	4606      	mov	r6, r0
 80034b2:	db01      	blt.n	80034b8 <_malloc_r+0x1c>
 80034b4:	42a9      	cmp	r1, r5
 80034b6:	d904      	bls.n	80034c2 <_malloc_r+0x26>
 80034b8:	230c      	movs	r3, #12
 80034ba:	6033      	str	r3, [r6, #0]
 80034bc:	2000      	movs	r0, #0
 80034be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003598 <_malloc_r+0xfc>
 80034c6:	f000 f869 	bl	800359c <__malloc_lock>
 80034ca:	f8d8 3000 	ldr.w	r3, [r8]
 80034ce:	461c      	mov	r4, r3
 80034d0:	bb44      	cbnz	r4, 8003524 <_malloc_r+0x88>
 80034d2:	4629      	mov	r1, r5
 80034d4:	4630      	mov	r0, r6
 80034d6:	f7ff ffbf 	bl	8003458 <sbrk_aligned>
 80034da:	1c43      	adds	r3, r0, #1
 80034dc:	4604      	mov	r4, r0
 80034de:	d158      	bne.n	8003592 <_malloc_r+0xf6>
 80034e0:	f8d8 4000 	ldr.w	r4, [r8]
 80034e4:	4627      	mov	r7, r4
 80034e6:	2f00      	cmp	r7, #0
 80034e8:	d143      	bne.n	8003572 <_malloc_r+0xd6>
 80034ea:	2c00      	cmp	r4, #0
 80034ec:	d04b      	beq.n	8003586 <_malloc_r+0xea>
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	4639      	mov	r1, r7
 80034f2:	4630      	mov	r0, r6
 80034f4:	eb04 0903 	add.w	r9, r4, r3
 80034f8:	f000 fcee 	bl	8003ed8 <_sbrk_r>
 80034fc:	4581      	cmp	r9, r0
 80034fe:	d142      	bne.n	8003586 <_malloc_r+0xea>
 8003500:	6821      	ldr	r1, [r4, #0]
 8003502:	1a6d      	subs	r5, r5, r1
 8003504:	4629      	mov	r1, r5
 8003506:	4630      	mov	r0, r6
 8003508:	f7ff ffa6 	bl	8003458 <sbrk_aligned>
 800350c:	3001      	adds	r0, #1
 800350e:	d03a      	beq.n	8003586 <_malloc_r+0xea>
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	442b      	add	r3, r5
 8003514:	6023      	str	r3, [r4, #0]
 8003516:	f8d8 3000 	ldr.w	r3, [r8]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	bb62      	cbnz	r2, 8003578 <_malloc_r+0xdc>
 800351e:	f8c8 7000 	str.w	r7, [r8]
 8003522:	e00f      	b.n	8003544 <_malloc_r+0xa8>
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	1b52      	subs	r2, r2, r5
 8003528:	d420      	bmi.n	800356c <_malloc_r+0xd0>
 800352a:	2a0b      	cmp	r2, #11
 800352c:	d917      	bls.n	800355e <_malloc_r+0xc2>
 800352e:	1961      	adds	r1, r4, r5
 8003530:	42a3      	cmp	r3, r4
 8003532:	6025      	str	r5, [r4, #0]
 8003534:	bf18      	it	ne
 8003536:	6059      	strne	r1, [r3, #4]
 8003538:	6863      	ldr	r3, [r4, #4]
 800353a:	bf08      	it	eq
 800353c:	f8c8 1000 	streq.w	r1, [r8]
 8003540:	5162      	str	r2, [r4, r5]
 8003542:	604b      	str	r3, [r1, #4]
 8003544:	4630      	mov	r0, r6
 8003546:	f000 f82f 	bl	80035a8 <__malloc_unlock>
 800354a:	f104 000b 	add.w	r0, r4, #11
 800354e:	1d23      	adds	r3, r4, #4
 8003550:	f020 0007 	bic.w	r0, r0, #7
 8003554:	1ac2      	subs	r2, r0, r3
 8003556:	bf1c      	itt	ne
 8003558:	1a1b      	subne	r3, r3, r0
 800355a:	50a3      	strne	r3, [r4, r2]
 800355c:	e7af      	b.n	80034be <_malloc_r+0x22>
 800355e:	6862      	ldr	r2, [r4, #4]
 8003560:	42a3      	cmp	r3, r4
 8003562:	bf0c      	ite	eq
 8003564:	f8c8 2000 	streq.w	r2, [r8]
 8003568:	605a      	strne	r2, [r3, #4]
 800356a:	e7eb      	b.n	8003544 <_malloc_r+0xa8>
 800356c:	4623      	mov	r3, r4
 800356e:	6864      	ldr	r4, [r4, #4]
 8003570:	e7ae      	b.n	80034d0 <_malloc_r+0x34>
 8003572:	463c      	mov	r4, r7
 8003574:	687f      	ldr	r7, [r7, #4]
 8003576:	e7b6      	b.n	80034e6 <_malloc_r+0x4a>
 8003578:	461a      	mov	r2, r3
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	42a3      	cmp	r3, r4
 800357e:	d1fb      	bne.n	8003578 <_malloc_r+0xdc>
 8003580:	2300      	movs	r3, #0
 8003582:	6053      	str	r3, [r2, #4]
 8003584:	e7de      	b.n	8003544 <_malloc_r+0xa8>
 8003586:	230c      	movs	r3, #12
 8003588:	6033      	str	r3, [r6, #0]
 800358a:	4630      	mov	r0, r6
 800358c:	f000 f80c 	bl	80035a8 <__malloc_unlock>
 8003590:	e794      	b.n	80034bc <_malloc_r+0x20>
 8003592:	6005      	str	r5, [r0, #0]
 8003594:	e7d6      	b.n	8003544 <_malloc_r+0xa8>
 8003596:	bf00      	nop
 8003598:	200002a8 	.word	0x200002a8

0800359c <__malloc_lock>:
 800359c:	4801      	ldr	r0, [pc, #4]	@ (80035a4 <__malloc_lock+0x8>)
 800359e:	f7ff bf06 	b.w	80033ae <__retarget_lock_acquire_recursive>
 80035a2:	bf00      	nop
 80035a4:	200002a0 	.word	0x200002a0

080035a8 <__malloc_unlock>:
 80035a8:	4801      	ldr	r0, [pc, #4]	@ (80035b0 <__malloc_unlock+0x8>)
 80035aa:	f7ff bf01 	b.w	80033b0 <__retarget_lock_release_recursive>
 80035ae:	bf00      	nop
 80035b0:	200002a0 	.word	0x200002a0

080035b4 <__sfputc_r>:
 80035b4:	6893      	ldr	r3, [r2, #8]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	b410      	push	{r4}
 80035bc:	6093      	str	r3, [r2, #8]
 80035be:	da08      	bge.n	80035d2 <__sfputc_r+0x1e>
 80035c0:	6994      	ldr	r4, [r2, #24]
 80035c2:	42a3      	cmp	r3, r4
 80035c4:	db01      	blt.n	80035ca <__sfputc_r+0x16>
 80035c6:	290a      	cmp	r1, #10
 80035c8:	d103      	bne.n	80035d2 <__sfputc_r+0x1e>
 80035ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035ce:	f000 bbcd 	b.w	8003d6c <__swbuf_r>
 80035d2:	6813      	ldr	r3, [r2, #0]
 80035d4:	1c58      	adds	r0, r3, #1
 80035d6:	6010      	str	r0, [r2, #0]
 80035d8:	7019      	strb	r1, [r3, #0]
 80035da:	4608      	mov	r0, r1
 80035dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <__sfputs_r>:
 80035e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e4:	4606      	mov	r6, r0
 80035e6:	460f      	mov	r7, r1
 80035e8:	4614      	mov	r4, r2
 80035ea:	18d5      	adds	r5, r2, r3
 80035ec:	42ac      	cmp	r4, r5
 80035ee:	d101      	bne.n	80035f4 <__sfputs_r+0x12>
 80035f0:	2000      	movs	r0, #0
 80035f2:	e007      	b.n	8003604 <__sfputs_r+0x22>
 80035f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035f8:	463a      	mov	r2, r7
 80035fa:	4630      	mov	r0, r6
 80035fc:	f7ff ffda 	bl	80035b4 <__sfputc_r>
 8003600:	1c43      	adds	r3, r0, #1
 8003602:	d1f3      	bne.n	80035ec <__sfputs_r+0xa>
 8003604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003608 <_vfiprintf_r>:
 8003608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360c:	460d      	mov	r5, r1
 800360e:	b09d      	sub	sp, #116	@ 0x74
 8003610:	4614      	mov	r4, r2
 8003612:	4698      	mov	r8, r3
 8003614:	4606      	mov	r6, r0
 8003616:	b118      	cbz	r0, 8003620 <_vfiprintf_r+0x18>
 8003618:	6a03      	ldr	r3, [r0, #32]
 800361a:	b90b      	cbnz	r3, 8003620 <_vfiprintf_r+0x18>
 800361c:	f7ff fd06 	bl	800302c <__sinit>
 8003620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003622:	07d9      	lsls	r1, r3, #31
 8003624:	d405      	bmi.n	8003632 <_vfiprintf_r+0x2a>
 8003626:	89ab      	ldrh	r3, [r5, #12]
 8003628:	059a      	lsls	r2, r3, #22
 800362a:	d402      	bmi.n	8003632 <_vfiprintf_r+0x2a>
 800362c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800362e:	f7ff febe 	bl	80033ae <__retarget_lock_acquire_recursive>
 8003632:	89ab      	ldrh	r3, [r5, #12]
 8003634:	071b      	lsls	r3, r3, #28
 8003636:	d501      	bpl.n	800363c <_vfiprintf_r+0x34>
 8003638:	692b      	ldr	r3, [r5, #16]
 800363a:	b99b      	cbnz	r3, 8003664 <_vfiprintf_r+0x5c>
 800363c:	4629      	mov	r1, r5
 800363e:	4630      	mov	r0, r6
 8003640:	f000 fbd2 	bl	8003de8 <__swsetup_r>
 8003644:	b170      	cbz	r0, 8003664 <_vfiprintf_r+0x5c>
 8003646:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003648:	07dc      	lsls	r4, r3, #31
 800364a:	d504      	bpl.n	8003656 <_vfiprintf_r+0x4e>
 800364c:	f04f 30ff 	mov.w	r0, #4294967295
 8003650:	b01d      	add	sp, #116	@ 0x74
 8003652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003656:	89ab      	ldrh	r3, [r5, #12]
 8003658:	0598      	lsls	r0, r3, #22
 800365a:	d4f7      	bmi.n	800364c <_vfiprintf_r+0x44>
 800365c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800365e:	f7ff fea7 	bl	80033b0 <__retarget_lock_release_recursive>
 8003662:	e7f3      	b.n	800364c <_vfiprintf_r+0x44>
 8003664:	2300      	movs	r3, #0
 8003666:	9309      	str	r3, [sp, #36]	@ 0x24
 8003668:	2320      	movs	r3, #32
 800366a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800366e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003672:	2330      	movs	r3, #48	@ 0x30
 8003674:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003824 <_vfiprintf_r+0x21c>
 8003678:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800367c:	f04f 0901 	mov.w	r9, #1
 8003680:	4623      	mov	r3, r4
 8003682:	469a      	mov	sl, r3
 8003684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003688:	b10a      	cbz	r2, 800368e <_vfiprintf_r+0x86>
 800368a:	2a25      	cmp	r2, #37	@ 0x25
 800368c:	d1f9      	bne.n	8003682 <_vfiprintf_r+0x7a>
 800368e:	ebba 0b04 	subs.w	fp, sl, r4
 8003692:	d00b      	beq.n	80036ac <_vfiprintf_r+0xa4>
 8003694:	465b      	mov	r3, fp
 8003696:	4622      	mov	r2, r4
 8003698:	4629      	mov	r1, r5
 800369a:	4630      	mov	r0, r6
 800369c:	f7ff ffa1 	bl	80035e2 <__sfputs_r>
 80036a0:	3001      	adds	r0, #1
 80036a2:	f000 80a7 	beq.w	80037f4 <_vfiprintf_r+0x1ec>
 80036a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036a8:	445a      	add	r2, fp
 80036aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80036ac:	f89a 3000 	ldrb.w	r3, [sl]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 809f 	beq.w	80037f4 <_vfiprintf_r+0x1ec>
 80036b6:	2300      	movs	r3, #0
 80036b8:	f04f 32ff 	mov.w	r2, #4294967295
 80036bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036c0:	f10a 0a01 	add.w	sl, sl, #1
 80036c4:	9304      	str	r3, [sp, #16]
 80036c6:	9307      	str	r3, [sp, #28]
 80036c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80036ce:	4654      	mov	r4, sl
 80036d0:	2205      	movs	r2, #5
 80036d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036d6:	4853      	ldr	r0, [pc, #332]	@ (8003824 <_vfiprintf_r+0x21c>)
 80036d8:	f7fc fd7a 	bl	80001d0 <memchr>
 80036dc:	9a04      	ldr	r2, [sp, #16]
 80036de:	b9d8      	cbnz	r0, 8003718 <_vfiprintf_r+0x110>
 80036e0:	06d1      	lsls	r1, r2, #27
 80036e2:	bf44      	itt	mi
 80036e4:	2320      	movmi	r3, #32
 80036e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036ea:	0713      	lsls	r3, r2, #28
 80036ec:	bf44      	itt	mi
 80036ee:	232b      	movmi	r3, #43	@ 0x2b
 80036f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036f4:	f89a 3000 	ldrb.w	r3, [sl]
 80036f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80036fa:	d015      	beq.n	8003728 <_vfiprintf_r+0x120>
 80036fc:	9a07      	ldr	r2, [sp, #28]
 80036fe:	4654      	mov	r4, sl
 8003700:	2000      	movs	r0, #0
 8003702:	f04f 0c0a 	mov.w	ip, #10
 8003706:	4621      	mov	r1, r4
 8003708:	f811 3b01 	ldrb.w	r3, [r1], #1
 800370c:	3b30      	subs	r3, #48	@ 0x30
 800370e:	2b09      	cmp	r3, #9
 8003710:	d94b      	bls.n	80037aa <_vfiprintf_r+0x1a2>
 8003712:	b1b0      	cbz	r0, 8003742 <_vfiprintf_r+0x13a>
 8003714:	9207      	str	r2, [sp, #28]
 8003716:	e014      	b.n	8003742 <_vfiprintf_r+0x13a>
 8003718:	eba0 0308 	sub.w	r3, r0, r8
 800371c:	fa09 f303 	lsl.w	r3, r9, r3
 8003720:	4313      	orrs	r3, r2
 8003722:	9304      	str	r3, [sp, #16]
 8003724:	46a2      	mov	sl, r4
 8003726:	e7d2      	b.n	80036ce <_vfiprintf_r+0xc6>
 8003728:	9b03      	ldr	r3, [sp, #12]
 800372a:	1d19      	adds	r1, r3, #4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	9103      	str	r1, [sp, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	bfbb      	ittet	lt
 8003734:	425b      	neglt	r3, r3
 8003736:	f042 0202 	orrlt.w	r2, r2, #2
 800373a:	9307      	strge	r3, [sp, #28]
 800373c:	9307      	strlt	r3, [sp, #28]
 800373e:	bfb8      	it	lt
 8003740:	9204      	strlt	r2, [sp, #16]
 8003742:	7823      	ldrb	r3, [r4, #0]
 8003744:	2b2e      	cmp	r3, #46	@ 0x2e
 8003746:	d10a      	bne.n	800375e <_vfiprintf_r+0x156>
 8003748:	7863      	ldrb	r3, [r4, #1]
 800374a:	2b2a      	cmp	r3, #42	@ 0x2a
 800374c:	d132      	bne.n	80037b4 <_vfiprintf_r+0x1ac>
 800374e:	9b03      	ldr	r3, [sp, #12]
 8003750:	1d1a      	adds	r2, r3, #4
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	9203      	str	r2, [sp, #12]
 8003756:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800375a:	3402      	adds	r4, #2
 800375c:	9305      	str	r3, [sp, #20]
 800375e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003834 <_vfiprintf_r+0x22c>
 8003762:	7821      	ldrb	r1, [r4, #0]
 8003764:	2203      	movs	r2, #3
 8003766:	4650      	mov	r0, sl
 8003768:	f7fc fd32 	bl	80001d0 <memchr>
 800376c:	b138      	cbz	r0, 800377e <_vfiprintf_r+0x176>
 800376e:	9b04      	ldr	r3, [sp, #16]
 8003770:	eba0 000a 	sub.w	r0, r0, sl
 8003774:	2240      	movs	r2, #64	@ 0x40
 8003776:	4082      	lsls	r2, r0
 8003778:	4313      	orrs	r3, r2
 800377a:	3401      	adds	r4, #1
 800377c:	9304      	str	r3, [sp, #16]
 800377e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003782:	4829      	ldr	r0, [pc, #164]	@ (8003828 <_vfiprintf_r+0x220>)
 8003784:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003788:	2206      	movs	r2, #6
 800378a:	f7fc fd21 	bl	80001d0 <memchr>
 800378e:	2800      	cmp	r0, #0
 8003790:	d03f      	beq.n	8003812 <_vfiprintf_r+0x20a>
 8003792:	4b26      	ldr	r3, [pc, #152]	@ (800382c <_vfiprintf_r+0x224>)
 8003794:	bb1b      	cbnz	r3, 80037de <_vfiprintf_r+0x1d6>
 8003796:	9b03      	ldr	r3, [sp, #12]
 8003798:	3307      	adds	r3, #7
 800379a:	f023 0307 	bic.w	r3, r3, #7
 800379e:	3308      	adds	r3, #8
 80037a0:	9303      	str	r3, [sp, #12]
 80037a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037a4:	443b      	add	r3, r7
 80037a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80037a8:	e76a      	b.n	8003680 <_vfiprintf_r+0x78>
 80037aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80037ae:	460c      	mov	r4, r1
 80037b0:	2001      	movs	r0, #1
 80037b2:	e7a8      	b.n	8003706 <_vfiprintf_r+0xfe>
 80037b4:	2300      	movs	r3, #0
 80037b6:	3401      	adds	r4, #1
 80037b8:	9305      	str	r3, [sp, #20]
 80037ba:	4619      	mov	r1, r3
 80037bc:	f04f 0c0a 	mov.w	ip, #10
 80037c0:	4620      	mov	r0, r4
 80037c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037c6:	3a30      	subs	r2, #48	@ 0x30
 80037c8:	2a09      	cmp	r2, #9
 80037ca:	d903      	bls.n	80037d4 <_vfiprintf_r+0x1cc>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0c6      	beq.n	800375e <_vfiprintf_r+0x156>
 80037d0:	9105      	str	r1, [sp, #20]
 80037d2:	e7c4      	b.n	800375e <_vfiprintf_r+0x156>
 80037d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80037d8:	4604      	mov	r4, r0
 80037da:	2301      	movs	r3, #1
 80037dc:	e7f0      	b.n	80037c0 <_vfiprintf_r+0x1b8>
 80037de:	ab03      	add	r3, sp, #12
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	462a      	mov	r2, r5
 80037e4:	4b12      	ldr	r3, [pc, #72]	@ (8003830 <_vfiprintf_r+0x228>)
 80037e6:	a904      	add	r1, sp, #16
 80037e8:	4630      	mov	r0, r6
 80037ea:	f3af 8000 	nop.w
 80037ee:	4607      	mov	r7, r0
 80037f0:	1c78      	adds	r0, r7, #1
 80037f2:	d1d6      	bne.n	80037a2 <_vfiprintf_r+0x19a>
 80037f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037f6:	07d9      	lsls	r1, r3, #31
 80037f8:	d405      	bmi.n	8003806 <_vfiprintf_r+0x1fe>
 80037fa:	89ab      	ldrh	r3, [r5, #12]
 80037fc:	059a      	lsls	r2, r3, #22
 80037fe:	d402      	bmi.n	8003806 <_vfiprintf_r+0x1fe>
 8003800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003802:	f7ff fdd5 	bl	80033b0 <__retarget_lock_release_recursive>
 8003806:	89ab      	ldrh	r3, [r5, #12]
 8003808:	065b      	lsls	r3, r3, #25
 800380a:	f53f af1f 	bmi.w	800364c <_vfiprintf_r+0x44>
 800380e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003810:	e71e      	b.n	8003650 <_vfiprintf_r+0x48>
 8003812:	ab03      	add	r3, sp, #12
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	462a      	mov	r2, r5
 8003818:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <_vfiprintf_r+0x228>)
 800381a:	a904      	add	r1, sp, #16
 800381c:	4630      	mov	r0, r6
 800381e:	f000 f879 	bl	8003914 <_printf_i>
 8003822:	e7e4      	b.n	80037ee <_vfiprintf_r+0x1e6>
 8003824:	08003f50 	.word	0x08003f50
 8003828:	08003f5a 	.word	0x08003f5a
 800382c:	00000000 	.word	0x00000000
 8003830:	080035e3 	.word	0x080035e3
 8003834:	08003f56 	.word	0x08003f56

08003838 <_printf_common>:
 8003838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800383c:	4616      	mov	r6, r2
 800383e:	4698      	mov	r8, r3
 8003840:	688a      	ldr	r2, [r1, #8]
 8003842:	690b      	ldr	r3, [r1, #16]
 8003844:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003848:	4293      	cmp	r3, r2
 800384a:	bfb8      	it	lt
 800384c:	4613      	movlt	r3, r2
 800384e:	6033      	str	r3, [r6, #0]
 8003850:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003854:	4607      	mov	r7, r0
 8003856:	460c      	mov	r4, r1
 8003858:	b10a      	cbz	r2, 800385e <_printf_common+0x26>
 800385a:	3301      	adds	r3, #1
 800385c:	6033      	str	r3, [r6, #0]
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	0699      	lsls	r1, r3, #26
 8003862:	bf42      	ittt	mi
 8003864:	6833      	ldrmi	r3, [r6, #0]
 8003866:	3302      	addmi	r3, #2
 8003868:	6033      	strmi	r3, [r6, #0]
 800386a:	6825      	ldr	r5, [r4, #0]
 800386c:	f015 0506 	ands.w	r5, r5, #6
 8003870:	d106      	bne.n	8003880 <_printf_common+0x48>
 8003872:	f104 0a19 	add.w	sl, r4, #25
 8003876:	68e3      	ldr	r3, [r4, #12]
 8003878:	6832      	ldr	r2, [r6, #0]
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	42ab      	cmp	r3, r5
 800387e:	dc26      	bgt.n	80038ce <_printf_common+0x96>
 8003880:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003884:	6822      	ldr	r2, [r4, #0]
 8003886:	3b00      	subs	r3, #0
 8003888:	bf18      	it	ne
 800388a:	2301      	movne	r3, #1
 800388c:	0692      	lsls	r2, r2, #26
 800388e:	d42b      	bmi.n	80038e8 <_printf_common+0xb0>
 8003890:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003894:	4641      	mov	r1, r8
 8003896:	4638      	mov	r0, r7
 8003898:	47c8      	blx	r9
 800389a:	3001      	adds	r0, #1
 800389c:	d01e      	beq.n	80038dc <_printf_common+0xa4>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	6922      	ldr	r2, [r4, #16]
 80038a2:	f003 0306 	and.w	r3, r3, #6
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	bf02      	ittt	eq
 80038aa:	68e5      	ldreq	r5, [r4, #12]
 80038ac:	6833      	ldreq	r3, [r6, #0]
 80038ae:	1aed      	subeq	r5, r5, r3
 80038b0:	68a3      	ldr	r3, [r4, #8]
 80038b2:	bf0c      	ite	eq
 80038b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038b8:	2500      	movne	r5, #0
 80038ba:	4293      	cmp	r3, r2
 80038bc:	bfc4      	itt	gt
 80038be:	1a9b      	subgt	r3, r3, r2
 80038c0:	18ed      	addgt	r5, r5, r3
 80038c2:	2600      	movs	r6, #0
 80038c4:	341a      	adds	r4, #26
 80038c6:	42b5      	cmp	r5, r6
 80038c8:	d11a      	bne.n	8003900 <_printf_common+0xc8>
 80038ca:	2000      	movs	r0, #0
 80038cc:	e008      	b.n	80038e0 <_printf_common+0xa8>
 80038ce:	2301      	movs	r3, #1
 80038d0:	4652      	mov	r2, sl
 80038d2:	4641      	mov	r1, r8
 80038d4:	4638      	mov	r0, r7
 80038d6:	47c8      	blx	r9
 80038d8:	3001      	adds	r0, #1
 80038da:	d103      	bne.n	80038e4 <_printf_common+0xac>
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295
 80038e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e4:	3501      	adds	r5, #1
 80038e6:	e7c6      	b.n	8003876 <_printf_common+0x3e>
 80038e8:	18e1      	adds	r1, r4, r3
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	2030      	movs	r0, #48	@ 0x30
 80038ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038f2:	4422      	add	r2, r4
 80038f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038fc:	3302      	adds	r3, #2
 80038fe:	e7c7      	b.n	8003890 <_printf_common+0x58>
 8003900:	2301      	movs	r3, #1
 8003902:	4622      	mov	r2, r4
 8003904:	4641      	mov	r1, r8
 8003906:	4638      	mov	r0, r7
 8003908:	47c8      	blx	r9
 800390a:	3001      	adds	r0, #1
 800390c:	d0e6      	beq.n	80038dc <_printf_common+0xa4>
 800390e:	3601      	adds	r6, #1
 8003910:	e7d9      	b.n	80038c6 <_printf_common+0x8e>
	...

08003914 <_printf_i>:
 8003914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003918:	7e0f      	ldrb	r7, [r1, #24]
 800391a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800391c:	2f78      	cmp	r7, #120	@ 0x78
 800391e:	4691      	mov	r9, r2
 8003920:	4680      	mov	r8, r0
 8003922:	460c      	mov	r4, r1
 8003924:	469a      	mov	sl, r3
 8003926:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800392a:	d807      	bhi.n	800393c <_printf_i+0x28>
 800392c:	2f62      	cmp	r7, #98	@ 0x62
 800392e:	d80a      	bhi.n	8003946 <_printf_i+0x32>
 8003930:	2f00      	cmp	r7, #0
 8003932:	f000 80d1 	beq.w	8003ad8 <_printf_i+0x1c4>
 8003936:	2f58      	cmp	r7, #88	@ 0x58
 8003938:	f000 80b8 	beq.w	8003aac <_printf_i+0x198>
 800393c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003940:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003944:	e03a      	b.n	80039bc <_printf_i+0xa8>
 8003946:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800394a:	2b15      	cmp	r3, #21
 800394c:	d8f6      	bhi.n	800393c <_printf_i+0x28>
 800394e:	a101      	add	r1, pc, #4	@ (adr r1, 8003954 <_printf_i+0x40>)
 8003950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003954:	080039ad 	.word	0x080039ad
 8003958:	080039c1 	.word	0x080039c1
 800395c:	0800393d 	.word	0x0800393d
 8003960:	0800393d 	.word	0x0800393d
 8003964:	0800393d 	.word	0x0800393d
 8003968:	0800393d 	.word	0x0800393d
 800396c:	080039c1 	.word	0x080039c1
 8003970:	0800393d 	.word	0x0800393d
 8003974:	0800393d 	.word	0x0800393d
 8003978:	0800393d 	.word	0x0800393d
 800397c:	0800393d 	.word	0x0800393d
 8003980:	08003abf 	.word	0x08003abf
 8003984:	080039eb 	.word	0x080039eb
 8003988:	08003a79 	.word	0x08003a79
 800398c:	0800393d 	.word	0x0800393d
 8003990:	0800393d 	.word	0x0800393d
 8003994:	08003ae1 	.word	0x08003ae1
 8003998:	0800393d 	.word	0x0800393d
 800399c:	080039eb 	.word	0x080039eb
 80039a0:	0800393d 	.word	0x0800393d
 80039a4:	0800393d 	.word	0x0800393d
 80039a8:	08003a81 	.word	0x08003a81
 80039ac:	6833      	ldr	r3, [r6, #0]
 80039ae:	1d1a      	adds	r2, r3, #4
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6032      	str	r2, [r6, #0]
 80039b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039bc:	2301      	movs	r3, #1
 80039be:	e09c      	b.n	8003afa <_printf_i+0x1e6>
 80039c0:	6833      	ldr	r3, [r6, #0]
 80039c2:	6820      	ldr	r0, [r4, #0]
 80039c4:	1d19      	adds	r1, r3, #4
 80039c6:	6031      	str	r1, [r6, #0]
 80039c8:	0606      	lsls	r6, r0, #24
 80039ca:	d501      	bpl.n	80039d0 <_printf_i+0xbc>
 80039cc:	681d      	ldr	r5, [r3, #0]
 80039ce:	e003      	b.n	80039d8 <_printf_i+0xc4>
 80039d0:	0645      	lsls	r5, r0, #25
 80039d2:	d5fb      	bpl.n	80039cc <_printf_i+0xb8>
 80039d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039d8:	2d00      	cmp	r5, #0
 80039da:	da03      	bge.n	80039e4 <_printf_i+0xd0>
 80039dc:	232d      	movs	r3, #45	@ 0x2d
 80039de:	426d      	negs	r5, r5
 80039e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039e4:	4858      	ldr	r0, [pc, #352]	@ (8003b48 <_printf_i+0x234>)
 80039e6:	230a      	movs	r3, #10
 80039e8:	e011      	b.n	8003a0e <_printf_i+0xfa>
 80039ea:	6821      	ldr	r1, [r4, #0]
 80039ec:	6833      	ldr	r3, [r6, #0]
 80039ee:	0608      	lsls	r0, r1, #24
 80039f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80039f4:	d402      	bmi.n	80039fc <_printf_i+0xe8>
 80039f6:	0649      	lsls	r1, r1, #25
 80039f8:	bf48      	it	mi
 80039fa:	b2ad      	uxthmi	r5, r5
 80039fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80039fe:	4852      	ldr	r0, [pc, #328]	@ (8003b48 <_printf_i+0x234>)
 8003a00:	6033      	str	r3, [r6, #0]
 8003a02:	bf14      	ite	ne
 8003a04:	230a      	movne	r3, #10
 8003a06:	2308      	moveq	r3, #8
 8003a08:	2100      	movs	r1, #0
 8003a0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a0e:	6866      	ldr	r6, [r4, #4]
 8003a10:	60a6      	str	r6, [r4, #8]
 8003a12:	2e00      	cmp	r6, #0
 8003a14:	db05      	blt.n	8003a22 <_printf_i+0x10e>
 8003a16:	6821      	ldr	r1, [r4, #0]
 8003a18:	432e      	orrs	r6, r5
 8003a1a:	f021 0104 	bic.w	r1, r1, #4
 8003a1e:	6021      	str	r1, [r4, #0]
 8003a20:	d04b      	beq.n	8003aba <_printf_i+0x1a6>
 8003a22:	4616      	mov	r6, r2
 8003a24:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a28:	fb03 5711 	mls	r7, r3, r1, r5
 8003a2c:	5dc7      	ldrb	r7, [r0, r7]
 8003a2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a32:	462f      	mov	r7, r5
 8003a34:	42bb      	cmp	r3, r7
 8003a36:	460d      	mov	r5, r1
 8003a38:	d9f4      	bls.n	8003a24 <_printf_i+0x110>
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d10b      	bne.n	8003a56 <_printf_i+0x142>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	07df      	lsls	r7, r3, #31
 8003a42:	d508      	bpl.n	8003a56 <_printf_i+0x142>
 8003a44:	6923      	ldr	r3, [r4, #16]
 8003a46:	6861      	ldr	r1, [r4, #4]
 8003a48:	4299      	cmp	r1, r3
 8003a4a:	bfde      	ittt	le
 8003a4c:	2330      	movle	r3, #48	@ 0x30
 8003a4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a52:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a56:	1b92      	subs	r2, r2, r6
 8003a58:	6122      	str	r2, [r4, #16]
 8003a5a:	f8cd a000 	str.w	sl, [sp]
 8003a5e:	464b      	mov	r3, r9
 8003a60:	aa03      	add	r2, sp, #12
 8003a62:	4621      	mov	r1, r4
 8003a64:	4640      	mov	r0, r8
 8003a66:	f7ff fee7 	bl	8003838 <_printf_common>
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	d14a      	bne.n	8003b04 <_printf_i+0x1f0>
 8003a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a72:	b004      	add	sp, #16
 8003a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	f043 0320 	orr.w	r3, r3, #32
 8003a7e:	6023      	str	r3, [r4, #0]
 8003a80:	4832      	ldr	r0, [pc, #200]	@ (8003b4c <_printf_i+0x238>)
 8003a82:	2778      	movs	r7, #120	@ 0x78
 8003a84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	6831      	ldr	r1, [r6, #0]
 8003a8c:	061f      	lsls	r7, r3, #24
 8003a8e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a92:	d402      	bmi.n	8003a9a <_printf_i+0x186>
 8003a94:	065f      	lsls	r7, r3, #25
 8003a96:	bf48      	it	mi
 8003a98:	b2ad      	uxthmi	r5, r5
 8003a9a:	6031      	str	r1, [r6, #0]
 8003a9c:	07d9      	lsls	r1, r3, #31
 8003a9e:	bf44      	itt	mi
 8003aa0:	f043 0320 	orrmi.w	r3, r3, #32
 8003aa4:	6023      	strmi	r3, [r4, #0]
 8003aa6:	b11d      	cbz	r5, 8003ab0 <_printf_i+0x19c>
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	e7ad      	b.n	8003a08 <_printf_i+0xf4>
 8003aac:	4826      	ldr	r0, [pc, #152]	@ (8003b48 <_printf_i+0x234>)
 8003aae:	e7e9      	b.n	8003a84 <_printf_i+0x170>
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	f023 0320 	bic.w	r3, r3, #32
 8003ab6:	6023      	str	r3, [r4, #0]
 8003ab8:	e7f6      	b.n	8003aa8 <_printf_i+0x194>
 8003aba:	4616      	mov	r6, r2
 8003abc:	e7bd      	b.n	8003a3a <_printf_i+0x126>
 8003abe:	6833      	ldr	r3, [r6, #0]
 8003ac0:	6825      	ldr	r5, [r4, #0]
 8003ac2:	6961      	ldr	r1, [r4, #20]
 8003ac4:	1d18      	adds	r0, r3, #4
 8003ac6:	6030      	str	r0, [r6, #0]
 8003ac8:	062e      	lsls	r6, r5, #24
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	d501      	bpl.n	8003ad2 <_printf_i+0x1be>
 8003ace:	6019      	str	r1, [r3, #0]
 8003ad0:	e002      	b.n	8003ad8 <_printf_i+0x1c4>
 8003ad2:	0668      	lsls	r0, r5, #25
 8003ad4:	d5fb      	bpl.n	8003ace <_printf_i+0x1ba>
 8003ad6:	8019      	strh	r1, [r3, #0]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6123      	str	r3, [r4, #16]
 8003adc:	4616      	mov	r6, r2
 8003ade:	e7bc      	b.n	8003a5a <_printf_i+0x146>
 8003ae0:	6833      	ldr	r3, [r6, #0]
 8003ae2:	1d1a      	adds	r2, r3, #4
 8003ae4:	6032      	str	r2, [r6, #0]
 8003ae6:	681e      	ldr	r6, [r3, #0]
 8003ae8:	6862      	ldr	r2, [r4, #4]
 8003aea:	2100      	movs	r1, #0
 8003aec:	4630      	mov	r0, r6
 8003aee:	f7fc fb6f 	bl	80001d0 <memchr>
 8003af2:	b108      	cbz	r0, 8003af8 <_printf_i+0x1e4>
 8003af4:	1b80      	subs	r0, r0, r6
 8003af6:	6060      	str	r0, [r4, #4]
 8003af8:	6863      	ldr	r3, [r4, #4]
 8003afa:	6123      	str	r3, [r4, #16]
 8003afc:	2300      	movs	r3, #0
 8003afe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b02:	e7aa      	b.n	8003a5a <_printf_i+0x146>
 8003b04:	6923      	ldr	r3, [r4, #16]
 8003b06:	4632      	mov	r2, r6
 8003b08:	4649      	mov	r1, r9
 8003b0a:	4640      	mov	r0, r8
 8003b0c:	47d0      	blx	sl
 8003b0e:	3001      	adds	r0, #1
 8003b10:	d0ad      	beq.n	8003a6e <_printf_i+0x15a>
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	079b      	lsls	r3, r3, #30
 8003b16:	d413      	bmi.n	8003b40 <_printf_i+0x22c>
 8003b18:	68e0      	ldr	r0, [r4, #12]
 8003b1a:	9b03      	ldr	r3, [sp, #12]
 8003b1c:	4298      	cmp	r0, r3
 8003b1e:	bfb8      	it	lt
 8003b20:	4618      	movlt	r0, r3
 8003b22:	e7a6      	b.n	8003a72 <_printf_i+0x15e>
 8003b24:	2301      	movs	r3, #1
 8003b26:	4632      	mov	r2, r6
 8003b28:	4649      	mov	r1, r9
 8003b2a:	4640      	mov	r0, r8
 8003b2c:	47d0      	blx	sl
 8003b2e:	3001      	adds	r0, #1
 8003b30:	d09d      	beq.n	8003a6e <_printf_i+0x15a>
 8003b32:	3501      	adds	r5, #1
 8003b34:	68e3      	ldr	r3, [r4, #12]
 8003b36:	9903      	ldr	r1, [sp, #12]
 8003b38:	1a5b      	subs	r3, r3, r1
 8003b3a:	42ab      	cmp	r3, r5
 8003b3c:	dcf2      	bgt.n	8003b24 <_printf_i+0x210>
 8003b3e:	e7eb      	b.n	8003b18 <_printf_i+0x204>
 8003b40:	2500      	movs	r5, #0
 8003b42:	f104 0619 	add.w	r6, r4, #25
 8003b46:	e7f5      	b.n	8003b34 <_printf_i+0x220>
 8003b48:	08003f61 	.word	0x08003f61
 8003b4c:	08003f72 	.word	0x08003f72

08003b50 <__sflush_r>:
 8003b50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b58:	0716      	lsls	r6, r2, #28
 8003b5a:	4605      	mov	r5, r0
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	d454      	bmi.n	8003c0a <__sflush_r+0xba>
 8003b60:	684b      	ldr	r3, [r1, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	dc02      	bgt.n	8003b6c <__sflush_r+0x1c>
 8003b66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	dd48      	ble.n	8003bfe <__sflush_r+0xae>
 8003b6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b6e:	2e00      	cmp	r6, #0
 8003b70:	d045      	beq.n	8003bfe <__sflush_r+0xae>
 8003b72:	2300      	movs	r3, #0
 8003b74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003b78:	682f      	ldr	r7, [r5, #0]
 8003b7a:	6a21      	ldr	r1, [r4, #32]
 8003b7c:	602b      	str	r3, [r5, #0]
 8003b7e:	d030      	beq.n	8003be2 <__sflush_r+0x92>
 8003b80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b82:	89a3      	ldrh	r3, [r4, #12]
 8003b84:	0759      	lsls	r1, r3, #29
 8003b86:	d505      	bpl.n	8003b94 <__sflush_r+0x44>
 8003b88:	6863      	ldr	r3, [r4, #4]
 8003b8a:	1ad2      	subs	r2, r2, r3
 8003b8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b8e:	b10b      	cbz	r3, 8003b94 <__sflush_r+0x44>
 8003b90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b92:	1ad2      	subs	r2, r2, r3
 8003b94:	2300      	movs	r3, #0
 8003b96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b98:	6a21      	ldr	r1, [r4, #32]
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	47b0      	blx	r6
 8003b9e:	1c43      	adds	r3, r0, #1
 8003ba0:	89a3      	ldrh	r3, [r4, #12]
 8003ba2:	d106      	bne.n	8003bb2 <__sflush_r+0x62>
 8003ba4:	6829      	ldr	r1, [r5, #0]
 8003ba6:	291d      	cmp	r1, #29
 8003ba8:	d82b      	bhi.n	8003c02 <__sflush_r+0xb2>
 8003baa:	4a2a      	ldr	r2, [pc, #168]	@ (8003c54 <__sflush_r+0x104>)
 8003bac:	40ca      	lsrs	r2, r1
 8003bae:	07d6      	lsls	r6, r2, #31
 8003bb0:	d527      	bpl.n	8003c02 <__sflush_r+0xb2>
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	6062      	str	r2, [r4, #4]
 8003bb6:	04d9      	lsls	r1, r3, #19
 8003bb8:	6922      	ldr	r2, [r4, #16]
 8003bba:	6022      	str	r2, [r4, #0]
 8003bbc:	d504      	bpl.n	8003bc8 <__sflush_r+0x78>
 8003bbe:	1c42      	adds	r2, r0, #1
 8003bc0:	d101      	bne.n	8003bc6 <__sflush_r+0x76>
 8003bc2:	682b      	ldr	r3, [r5, #0]
 8003bc4:	b903      	cbnz	r3, 8003bc8 <__sflush_r+0x78>
 8003bc6:	6560      	str	r0, [r4, #84]	@ 0x54
 8003bc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bca:	602f      	str	r7, [r5, #0]
 8003bcc:	b1b9      	cbz	r1, 8003bfe <__sflush_r+0xae>
 8003bce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bd2:	4299      	cmp	r1, r3
 8003bd4:	d002      	beq.n	8003bdc <__sflush_r+0x8c>
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f7ff fbec 	bl	80033b4 <_free_r>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6363      	str	r3, [r4, #52]	@ 0x34
 8003be0:	e00d      	b.n	8003bfe <__sflush_r+0xae>
 8003be2:	2301      	movs	r3, #1
 8003be4:	4628      	mov	r0, r5
 8003be6:	47b0      	blx	r6
 8003be8:	4602      	mov	r2, r0
 8003bea:	1c50      	adds	r0, r2, #1
 8003bec:	d1c9      	bne.n	8003b82 <__sflush_r+0x32>
 8003bee:	682b      	ldr	r3, [r5, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0c6      	beq.n	8003b82 <__sflush_r+0x32>
 8003bf4:	2b1d      	cmp	r3, #29
 8003bf6:	d001      	beq.n	8003bfc <__sflush_r+0xac>
 8003bf8:	2b16      	cmp	r3, #22
 8003bfa:	d11e      	bne.n	8003c3a <__sflush_r+0xea>
 8003bfc:	602f      	str	r7, [r5, #0]
 8003bfe:	2000      	movs	r0, #0
 8003c00:	e022      	b.n	8003c48 <__sflush_r+0xf8>
 8003c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c06:	b21b      	sxth	r3, r3
 8003c08:	e01b      	b.n	8003c42 <__sflush_r+0xf2>
 8003c0a:	690f      	ldr	r7, [r1, #16]
 8003c0c:	2f00      	cmp	r7, #0
 8003c0e:	d0f6      	beq.n	8003bfe <__sflush_r+0xae>
 8003c10:	0793      	lsls	r3, r2, #30
 8003c12:	680e      	ldr	r6, [r1, #0]
 8003c14:	bf08      	it	eq
 8003c16:	694b      	ldreq	r3, [r1, #20]
 8003c18:	600f      	str	r7, [r1, #0]
 8003c1a:	bf18      	it	ne
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	eba6 0807 	sub.w	r8, r6, r7
 8003c22:	608b      	str	r3, [r1, #8]
 8003c24:	f1b8 0f00 	cmp.w	r8, #0
 8003c28:	dde9      	ble.n	8003bfe <__sflush_r+0xae>
 8003c2a:	6a21      	ldr	r1, [r4, #32]
 8003c2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003c2e:	4643      	mov	r3, r8
 8003c30:	463a      	mov	r2, r7
 8003c32:	4628      	mov	r0, r5
 8003c34:	47b0      	blx	r6
 8003c36:	2800      	cmp	r0, #0
 8003c38:	dc08      	bgt.n	8003c4c <__sflush_r+0xfc>
 8003c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c42:	81a3      	strh	r3, [r4, #12]
 8003c44:	f04f 30ff 	mov.w	r0, #4294967295
 8003c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c4c:	4407      	add	r7, r0
 8003c4e:	eba8 0800 	sub.w	r8, r8, r0
 8003c52:	e7e7      	b.n	8003c24 <__sflush_r+0xd4>
 8003c54:	20400001 	.word	0x20400001

08003c58 <_fflush_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	690b      	ldr	r3, [r1, #16]
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	460c      	mov	r4, r1
 8003c60:	b913      	cbnz	r3, 8003c68 <_fflush_r+0x10>
 8003c62:	2500      	movs	r5, #0
 8003c64:	4628      	mov	r0, r5
 8003c66:	bd38      	pop	{r3, r4, r5, pc}
 8003c68:	b118      	cbz	r0, 8003c72 <_fflush_r+0x1a>
 8003c6a:	6a03      	ldr	r3, [r0, #32]
 8003c6c:	b90b      	cbnz	r3, 8003c72 <_fflush_r+0x1a>
 8003c6e:	f7ff f9dd 	bl	800302c <__sinit>
 8003c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f3      	beq.n	8003c62 <_fflush_r+0xa>
 8003c7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c7c:	07d0      	lsls	r0, r2, #31
 8003c7e:	d404      	bmi.n	8003c8a <_fflush_r+0x32>
 8003c80:	0599      	lsls	r1, r3, #22
 8003c82:	d402      	bmi.n	8003c8a <_fflush_r+0x32>
 8003c84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c86:	f7ff fb92 	bl	80033ae <__retarget_lock_acquire_recursive>
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	f7ff ff5f 	bl	8003b50 <__sflush_r>
 8003c92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c94:	07da      	lsls	r2, r3, #31
 8003c96:	4605      	mov	r5, r0
 8003c98:	d4e4      	bmi.n	8003c64 <_fflush_r+0xc>
 8003c9a:	89a3      	ldrh	r3, [r4, #12]
 8003c9c:	059b      	lsls	r3, r3, #22
 8003c9e:	d4e1      	bmi.n	8003c64 <_fflush_r+0xc>
 8003ca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ca2:	f7ff fb85 	bl	80033b0 <__retarget_lock_release_recursive>
 8003ca6:	e7dd      	b.n	8003c64 <_fflush_r+0xc>

08003ca8 <__swhatbuf_r>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	460c      	mov	r4, r1
 8003cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb0:	2900      	cmp	r1, #0
 8003cb2:	b096      	sub	sp, #88	@ 0x58
 8003cb4:	4615      	mov	r5, r2
 8003cb6:	461e      	mov	r6, r3
 8003cb8:	da0d      	bge.n	8003cd6 <__swhatbuf_r+0x2e>
 8003cba:	89a3      	ldrh	r3, [r4, #12]
 8003cbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003cc0:	f04f 0100 	mov.w	r1, #0
 8003cc4:	bf14      	ite	ne
 8003cc6:	2340      	movne	r3, #64	@ 0x40
 8003cc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003ccc:	2000      	movs	r0, #0
 8003cce:	6031      	str	r1, [r6, #0]
 8003cd0:	602b      	str	r3, [r5, #0]
 8003cd2:	b016      	add	sp, #88	@ 0x58
 8003cd4:	bd70      	pop	{r4, r5, r6, pc}
 8003cd6:	466a      	mov	r2, sp
 8003cd8:	f000 f8dc 	bl	8003e94 <_fstat_r>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	dbec      	blt.n	8003cba <__swhatbuf_r+0x12>
 8003ce0:	9901      	ldr	r1, [sp, #4]
 8003ce2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003ce6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003cea:	4259      	negs	r1, r3
 8003cec:	4159      	adcs	r1, r3
 8003cee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cf2:	e7eb      	b.n	8003ccc <__swhatbuf_r+0x24>

08003cf4 <__smakebuf_r>:
 8003cf4:	898b      	ldrh	r3, [r1, #12]
 8003cf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cf8:	079d      	lsls	r5, r3, #30
 8003cfa:	4606      	mov	r6, r0
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	d507      	bpl.n	8003d10 <__smakebuf_r+0x1c>
 8003d00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	6123      	str	r3, [r4, #16]
 8003d08:	2301      	movs	r3, #1
 8003d0a:	6163      	str	r3, [r4, #20]
 8003d0c:	b003      	add	sp, #12
 8003d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d10:	ab01      	add	r3, sp, #4
 8003d12:	466a      	mov	r2, sp
 8003d14:	f7ff ffc8 	bl	8003ca8 <__swhatbuf_r>
 8003d18:	9f00      	ldr	r7, [sp, #0]
 8003d1a:	4605      	mov	r5, r0
 8003d1c:	4639      	mov	r1, r7
 8003d1e:	4630      	mov	r0, r6
 8003d20:	f7ff fbbc 	bl	800349c <_malloc_r>
 8003d24:	b948      	cbnz	r0, 8003d3a <__smakebuf_r+0x46>
 8003d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d2a:	059a      	lsls	r2, r3, #22
 8003d2c:	d4ee      	bmi.n	8003d0c <__smakebuf_r+0x18>
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	f043 0302 	orr.w	r3, r3, #2
 8003d36:	81a3      	strh	r3, [r4, #12]
 8003d38:	e7e2      	b.n	8003d00 <__smakebuf_r+0xc>
 8003d3a:	89a3      	ldrh	r3, [r4, #12]
 8003d3c:	6020      	str	r0, [r4, #0]
 8003d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d42:	81a3      	strh	r3, [r4, #12]
 8003d44:	9b01      	ldr	r3, [sp, #4]
 8003d46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003d4a:	b15b      	cbz	r3, 8003d64 <__smakebuf_r+0x70>
 8003d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d50:	4630      	mov	r0, r6
 8003d52:	f000 f8b1 	bl	8003eb8 <_isatty_r>
 8003d56:	b128      	cbz	r0, 8003d64 <__smakebuf_r+0x70>
 8003d58:	89a3      	ldrh	r3, [r4, #12]
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	81a3      	strh	r3, [r4, #12]
 8003d64:	89a3      	ldrh	r3, [r4, #12]
 8003d66:	431d      	orrs	r5, r3
 8003d68:	81a5      	strh	r5, [r4, #12]
 8003d6a:	e7cf      	b.n	8003d0c <__smakebuf_r+0x18>

08003d6c <__swbuf_r>:
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6e:	460e      	mov	r6, r1
 8003d70:	4614      	mov	r4, r2
 8003d72:	4605      	mov	r5, r0
 8003d74:	b118      	cbz	r0, 8003d7e <__swbuf_r+0x12>
 8003d76:	6a03      	ldr	r3, [r0, #32]
 8003d78:	b90b      	cbnz	r3, 8003d7e <__swbuf_r+0x12>
 8003d7a:	f7ff f957 	bl	800302c <__sinit>
 8003d7e:	69a3      	ldr	r3, [r4, #24]
 8003d80:	60a3      	str	r3, [r4, #8]
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	071a      	lsls	r2, r3, #28
 8003d86:	d501      	bpl.n	8003d8c <__swbuf_r+0x20>
 8003d88:	6923      	ldr	r3, [r4, #16]
 8003d8a:	b943      	cbnz	r3, 8003d9e <__swbuf_r+0x32>
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f000 f82a 	bl	8003de8 <__swsetup_r>
 8003d94:	b118      	cbz	r0, 8003d9e <__swbuf_r+0x32>
 8003d96:	f04f 37ff 	mov.w	r7, #4294967295
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	6922      	ldr	r2, [r4, #16]
 8003da2:	1a98      	subs	r0, r3, r2
 8003da4:	6963      	ldr	r3, [r4, #20]
 8003da6:	b2f6      	uxtb	r6, r6
 8003da8:	4283      	cmp	r3, r0
 8003daa:	4637      	mov	r7, r6
 8003dac:	dc05      	bgt.n	8003dba <__swbuf_r+0x4e>
 8003dae:	4621      	mov	r1, r4
 8003db0:	4628      	mov	r0, r5
 8003db2:	f7ff ff51 	bl	8003c58 <_fflush_r>
 8003db6:	2800      	cmp	r0, #0
 8003db8:	d1ed      	bne.n	8003d96 <__swbuf_r+0x2a>
 8003dba:	68a3      	ldr	r3, [r4, #8]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	60a3      	str	r3, [r4, #8]
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	6022      	str	r2, [r4, #0]
 8003dc6:	701e      	strb	r6, [r3, #0]
 8003dc8:	6962      	ldr	r2, [r4, #20]
 8003dca:	1c43      	adds	r3, r0, #1
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d004      	beq.n	8003dda <__swbuf_r+0x6e>
 8003dd0:	89a3      	ldrh	r3, [r4, #12]
 8003dd2:	07db      	lsls	r3, r3, #31
 8003dd4:	d5e1      	bpl.n	8003d9a <__swbuf_r+0x2e>
 8003dd6:	2e0a      	cmp	r6, #10
 8003dd8:	d1df      	bne.n	8003d9a <__swbuf_r+0x2e>
 8003dda:	4621      	mov	r1, r4
 8003ddc:	4628      	mov	r0, r5
 8003dde:	f7ff ff3b 	bl	8003c58 <_fflush_r>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d0d9      	beq.n	8003d9a <__swbuf_r+0x2e>
 8003de6:	e7d6      	b.n	8003d96 <__swbuf_r+0x2a>

08003de8 <__swsetup_r>:
 8003de8:	b538      	push	{r3, r4, r5, lr}
 8003dea:	4b29      	ldr	r3, [pc, #164]	@ (8003e90 <__swsetup_r+0xa8>)
 8003dec:	4605      	mov	r5, r0
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	460c      	mov	r4, r1
 8003df2:	b118      	cbz	r0, 8003dfc <__swsetup_r+0x14>
 8003df4:	6a03      	ldr	r3, [r0, #32]
 8003df6:	b90b      	cbnz	r3, 8003dfc <__swsetup_r+0x14>
 8003df8:	f7ff f918 	bl	800302c <__sinit>
 8003dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e00:	0719      	lsls	r1, r3, #28
 8003e02:	d422      	bmi.n	8003e4a <__swsetup_r+0x62>
 8003e04:	06da      	lsls	r2, r3, #27
 8003e06:	d407      	bmi.n	8003e18 <__swsetup_r+0x30>
 8003e08:	2209      	movs	r2, #9
 8003e0a:	602a      	str	r2, [r5, #0]
 8003e0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e10:	81a3      	strh	r3, [r4, #12]
 8003e12:	f04f 30ff 	mov.w	r0, #4294967295
 8003e16:	e033      	b.n	8003e80 <__swsetup_r+0x98>
 8003e18:	0758      	lsls	r0, r3, #29
 8003e1a:	d512      	bpl.n	8003e42 <__swsetup_r+0x5a>
 8003e1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e1e:	b141      	cbz	r1, 8003e32 <__swsetup_r+0x4a>
 8003e20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e24:	4299      	cmp	r1, r3
 8003e26:	d002      	beq.n	8003e2e <__swsetup_r+0x46>
 8003e28:	4628      	mov	r0, r5
 8003e2a:	f7ff fac3 	bl	80033b4 <_free_r>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003e38:	81a3      	strh	r3, [r4, #12]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	6063      	str	r3, [r4, #4]
 8003e3e:	6923      	ldr	r3, [r4, #16]
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	89a3      	ldrh	r3, [r4, #12]
 8003e44:	f043 0308 	orr.w	r3, r3, #8
 8003e48:	81a3      	strh	r3, [r4, #12]
 8003e4a:	6923      	ldr	r3, [r4, #16]
 8003e4c:	b94b      	cbnz	r3, 8003e62 <__swsetup_r+0x7a>
 8003e4e:	89a3      	ldrh	r3, [r4, #12]
 8003e50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e58:	d003      	beq.n	8003e62 <__swsetup_r+0x7a>
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f7ff ff49 	bl	8003cf4 <__smakebuf_r>
 8003e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e66:	f013 0201 	ands.w	r2, r3, #1
 8003e6a:	d00a      	beq.n	8003e82 <__swsetup_r+0x9a>
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	60a2      	str	r2, [r4, #8]
 8003e70:	6962      	ldr	r2, [r4, #20]
 8003e72:	4252      	negs	r2, r2
 8003e74:	61a2      	str	r2, [r4, #24]
 8003e76:	6922      	ldr	r2, [r4, #16]
 8003e78:	b942      	cbnz	r2, 8003e8c <__swsetup_r+0xa4>
 8003e7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003e7e:	d1c5      	bne.n	8003e0c <__swsetup_r+0x24>
 8003e80:	bd38      	pop	{r3, r4, r5, pc}
 8003e82:	0799      	lsls	r1, r3, #30
 8003e84:	bf58      	it	pl
 8003e86:	6962      	ldrpl	r2, [r4, #20]
 8003e88:	60a2      	str	r2, [r4, #8]
 8003e8a:	e7f4      	b.n	8003e76 <__swsetup_r+0x8e>
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	e7f7      	b.n	8003e80 <__swsetup_r+0x98>
 8003e90:	20000018 	.word	0x20000018

08003e94 <_fstat_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4d07      	ldr	r5, [pc, #28]	@ (8003eb4 <_fstat_r+0x20>)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	602b      	str	r3, [r5, #0]
 8003ea2:	f7fc fc25 	bl	80006f0 <_fstat>
 8003ea6:	1c43      	adds	r3, r0, #1
 8003ea8:	d102      	bne.n	8003eb0 <_fstat_r+0x1c>
 8003eaa:	682b      	ldr	r3, [r5, #0]
 8003eac:	b103      	cbz	r3, 8003eb0 <_fstat_r+0x1c>
 8003eae:	6023      	str	r3, [r4, #0]
 8003eb0:	bd38      	pop	{r3, r4, r5, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2000029c 	.word	0x2000029c

08003eb8 <_isatty_r>:
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4d06      	ldr	r5, [pc, #24]	@ (8003ed4 <_isatty_r+0x1c>)
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	602b      	str	r3, [r5, #0]
 8003ec4:	f7fc fc24 	bl	8000710 <_isatty>
 8003ec8:	1c43      	adds	r3, r0, #1
 8003eca:	d102      	bne.n	8003ed2 <_isatty_r+0x1a>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	b103      	cbz	r3, 8003ed2 <_isatty_r+0x1a>
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
 8003ed4:	2000029c 	.word	0x2000029c

08003ed8 <_sbrk_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4d06      	ldr	r5, [pc, #24]	@ (8003ef4 <_sbrk_r+0x1c>)
 8003edc:	2300      	movs	r3, #0
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	602b      	str	r3, [r5, #0]
 8003ee4:	f7fc fc2c 	bl	8000740 <_sbrk>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	d102      	bne.n	8003ef2 <_sbrk_r+0x1a>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	b103      	cbz	r3, 8003ef2 <_sbrk_r+0x1a>
 8003ef0:	6023      	str	r3, [r4, #0]
 8003ef2:	bd38      	pop	{r3, r4, r5, pc}
 8003ef4:	2000029c 	.word	0x2000029c

08003ef8 <_init>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr

08003f04 <_fini>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	bf00      	nop
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr
